<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSuite.SuiteAnalyticsConnect</name>
    </assembly>
    <members>
        <member name="F:DDInt.Common.CommonEscape.TIME">
            Implemented via BaseTimestampEscape class.
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.DATE">
            Implemented via BaseTimestampEscape class.
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.TIMESTAMP">
            Implemented via BaseTimestampEscape class.
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.FUNCTION">
            Implemented via BaseFunctionEscape class.
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.OUTER_JOIN">
            Implemented via BaseJoinEscape class.
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_PROCEDURE">
            Implemented via BaseCallEscape class.
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_FUNCTION">
            Implemented via BaseCallEscape class.
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.ESCAPE">
            Implemented via CommonEscapeEscape class.
            {escape 'c'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.EXTENSION">
            Implemented via CommonExtensionEscape class.
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Common.CommonEscape.generator">
            Used to obtain the text of sub-trees.
        </member>
        <member name="F:DDInt.Common.CommonEscape.escapeRoot">
            Records the escape type text.
        </member>
        <member name="M:DDInt.Common.CommonEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
            Constructor.
        </member>
        <member name="F:DDInt.Common.CommonEscapeParameterList.leftmostParameter">
            The leftmost parameter in the escape's parameter list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getParameter(System.Int32)">
             Returns the specified parameter as a String.
            
             @return the specified parameter as a String.
            
             @param parameterIndex - specified as 1-based ordinal.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getAllParameters">
             Returns a comma-separated String of all the parameters in the
             list.
            
             @return - Comma-separated String of all the parameters in the list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.setLeftmostparameter">
            Initialize the leftmost parameter pointer.  It can be null.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.generateText(DDInt.Parser.BaseSQLTreeNode)">
            Generate the text of the parameter or parameter list at the specified
            node.
        </member>
        <member name="P:DDInt.Common.CommonEscapeParameterList.ParameterCount">
             Returns the number of parameters in the parameter list.
            
             @return the number of parameters in the parameter list.
        </member>
        <member name="M:DDInt.Common.CommonCallEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList ...
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList ...
        </member>
        <member name="M:DDInt.Common.CommonConnectionOptions.GetOptionName(System.String)">
            <summary>
            Return the actual option name against this key
            </summary>
            <param name="keyName">Key or Synonym</param>
            <returns>Option Name</returns>
        </member>
        <member name="T:DDInt.Common.CEM">
            <summary>
            The CEM (shorthand for CommonErrorManagement) is a set of static methods
            for raising exceptions through a standard manner.  By using these methods
            to raise exceptions, we can trace all exceptions thrown by the common layer,
            obtain error strings from a resource file and map error conditions to
            the appropriate exception.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonEscapeEscape.getEscapeCharacter">
             Returns the escape character defined in the escape.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral ...
            
             @return the escape character defined in the escape.
        </member>
        <member name="F:DDInt.Common.CommonEscapeTranslator.NO_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <!-- Badly formed XML comment ignored for member "F:DDInt.Common.CommonEscapeTranslator.UNADORN_TRANSLATION_NEEDED" -->
        <member name="F:DDInt.Common.CommonEscapeTranslator.FULL_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateCallEscape(DDInt.Common.CommonCallEscape)">
             Returns translated call escape or null if the escape cannot be
             translated.
            
             @return translated call escape or null if the escape cannot be
             translated.
            
             @param callEscape - call escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateFunctionEscape(DDInt.Common.CommonFunctionEscape)">
             Returns translated function escape or null if the escape cannot be
             translated.
            
             @return translated function escape or null if the escape cannot be
             translated.
            
             @param functionEscape - fn escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateTimestampEscape(DDInt.Common.CommonTimestampEscape)">
             Returns translated t, d, or ts escape or null if the escape cannot
             be translated.
            
             @return translated t, d, or ts  escape or null if the escape cannot
             be translated.
            
             @param timestampEscape - t, d, or ts escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscapeEscape(DDInt.Common.CommonEscapeEscape)">
             Returns translated escape escape or null if the escape cannot
             be translated.
            
             @return translated escape escape or null if the escape cannot
             be translated.
            
             @param escapeEscape - escape escape semantic information
             obtained from the parse
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.getTranslationNeeded(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeFromClause(DDInt.Common.CommonJoinEscape)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.insertOuterJoinOperator(System.Text.StringBuilder,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeWhereClause(DDInt.Common.CommonJoinEscape,System.String)" -->
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscape(DDInt.Parser.BaseSQLTreeNode,System.String)">
             Oversees the m_translation of the escape.
            
             @param escapeSemantics - semantic information obtained from the parse.
             @param currentWhere - where clause associated with the escape.  Is null if doesn't exist.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getTranslation">
             Returns the translated escape.
            
             @return Returns the translated escape.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getNewWhere">
             Returns Updated WHERE clause or null if WHERE clause hasn't changed.
            
             @return Updated WHERE clause or null if WHERE clause hasn't changed.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateExtensionEscape(DDInt.Common.CommonExtensionEscape)">
             Returns translated extension escape or null if the escape cannot
             be translated.
            
             @return translated extension escape or null if the escape cannot
             be translated.
            
             @param extensionEscape - extension escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonExtensionEscape.validateExtensionName(System.String)">
             Determines if the value specified is a valid extension.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.NONE">
            Scalar function types.  These match the indexes of the scalar function
            names found in scalarFunctionNames.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.scalarFunctionNames">
             Valid scalar function names.
            
             Each function name's index doubles as the BaseSQLTreeNode operator.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.validateScalarFunctionName(System.String)">
             Determines if the value specified is a valid scalar function.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList ...
        </member>
        <member name="P:DDInt.Common.CommonFunctionEscape.FunctionText">
             Returns the function text w/o the escape adorning.  For example,
             returns "UCASE (NAME)" instead of "{fn UCASE (NAME)}".
            
             @return the function text w/o the escape adorning.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.NODE_RIGHT_OUTER_JOIN_OP">
            Join operator values.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojRoot">
            OJ root node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojCursor">
            Current outer join position node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.trCursor">
            Current table reference postion node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.joinOperator">
            Join operator or BaseSQLTreeNode.NODE_UNKNOWN if there are
            no more outer joins to enumeratre.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentSearchConditionNode">
            The value of the currently traversed search condition clause.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentTableNameNode">
            Table name from enumerated table reference.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstOuterJoinRequest">
            True if getNextOuterJoin () has been called before; false, otherwise.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstTableReferenceRequest">
            True if getNextTableReference () has been called before; false,
            otherwise.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextOuterJoin" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextTableReference" -->
        <member name="M:DDInt.Common.CommonJoinEscape.isJoinOperator(System.Int32)">
             Returns true if the specified operator is an outer join operator;
             false, otherwise.
            
             @return true if the specified operator is an outer join operator;
             false, otherwise.
            
             @param op - operator being tested.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentSearchCondition">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentJoinOperator">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentTableName">
             Returns the table name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the table name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentCorrelationName">
             Returns the correlation name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the correlation name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="T:NetSuite.Common.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.BAD_CONNECTION">
            <summary>
              Looks up a localized string similar to Connection must be valid and open.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.BAD_FIELD_OFFSET">
            <summary>
              Looks up a localized string similar to Field offset is greater than length..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_CHANGE_CURRENTUSER">
            <summary>
              Looks up a localized string similar to Changing the &apos;CurrentUser&apos; requires the Reauthentication Enabled connection option be set to true.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_GENERATE_COMMAND">
            <summary>
              Looks up a localized string similar to command object is not suitable for command generation..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_GENERATE_DELETE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_GENERATE_UPDATE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_GENERATE_UPDATE2">
            <summary>
              Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any modifiable columns..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_SPECIFY_OPTION_AGAIN">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option or its alias cannot be specified more than once in a connection string..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_UPDATE_JOIN">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation is not supported against multiple base tables.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CANNOT_USE_ARRAY_BINDING">
            <summary>
              Looks up a localized string similar to Only ExecuteNonQuery can use parameter array binding..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_Advanced">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_ConnectionPooling">
            <summary>
              Looks up a localized string similar to Connection Pooling.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_Failover">
            <summary>
              Looks up a localized string similar to Failover.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_Performance">
            <summary>
              Looks up a localized string similar to Performance.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_SchemaInformation">
            <summary>
              Looks up a localized string similar to Schema Information.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_Security">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_StandardConnection">
            <summary>
              Looks up a localized string similar to Standard Connection.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Category_Tracing">
            <summary>
              Looks up a localized string similar to Tracing.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CMDTXT_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to CommandText property has not been initialized..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_INDEX_INT32">
            <summary>
              Looks up a localized string similar to Invalid index {0} for this {1} with Count={2}..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_INDEX_STRING">
             <summary>
               Looks up a localized string similar to An {0} with {1} &apos;{2}&apos; is not contained by this {3}.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_INVALID_TYPE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects, not {2} objects..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_IS_NOT_PARENT">
             <summary>
               Looks up a localized string similar to The {0} is already contained by another {1}.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_IS_PARENT">
             <summary>
               Looks up a localized string similar to The {0} with is already contained by this {1}.
            .
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_NULL_VALUE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_REMOVE_INVALID_OBJECT">
            <summary>
              Looks up a localized string similar to Attempted to remove an {0} that is not contained by this {1}..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLLECTION_TIMED_OUT">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because the execution of the command timed out.  The &apos;Schema Collection Timeout&apos; connect option may need to be increased..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.COLUMN_INDEX_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find specified column in results.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_ALREADY_OPEN">
            <summary>
              Looks up a localized string similar to The connection is already Open (state=Open)..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_POOL_TIMEOUT">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_REQUIRED">
            <summary>
              Looks up a localized string similar to Operation requires connection object in SELECT command..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_REQUIRED_TO_DERIVE_PARAMS">
            <summary>
              Looks up a localized string similar to The DeriveParameters method requires that the given command object references an open connection..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_STATE_CLOSED">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is closed..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_STATE_OPEN">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is open..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONNECTION_STRING_SYNTAX">
            <summary>
              Looks up a localized string similar to Format of the initialization string does not conform to specification starting at index {0}..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CONSTR_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to The ConnectionString property has not been initialized..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CPU_COUNT_VIOLATION">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of NetSuite Connect for ADO.NET which may run on systems that  include up to {0} processors.  The current system is configured with {1} processors.  The 15 day grace period has expired – please contact NetSuite Technologies to upgrade this license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or T [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.CPU_COUNT_WARN">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of NetSuite Connect for ADO.NET which may run on systems that include up to {0} processors.  The current system is configured with {1} processors.  Please contact NetSuite within the next 15 days to upgrade the license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or Tel: +32 15 30 77 00
            France:  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.DATA_READER_IS_CLOSED">
            <summary>
              Looks up a localized string similar to Invalid attempt to {0} when reader is closed..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.DATA_READER_NO_DATA">
            <summary>
              Looks up a localized string similar to No data exists for the row or column..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_AlternateServers">
            <summary>
              Looks up a localized string similar to A list of database servers to which the data provider will try to connect if the primary database server is unavailable..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ConnectionReset">
            <summary>
              Looks up a localized string similar to When true, the connection state is reset when the connection is removed from the connection pool..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ConnectionRetryCount">
            <summary>
              Looks up a localized string similar to The number of times the data provider tries to connect to the primary server, and, if specified, the alternate servers after the initial unsuccessful attempt..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ConnectionRetryDelay">
            <summary>
              Looks up a localized string similar to The number of seconds the data provider waits after the initial unsuccessful connection attempt before retrying a connection to the primary server, and, if specified, the alternate servers..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ConnectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted connection to the server will fail if not yet connected..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_DefaultSchemaRestriction">
            <summary>
              Looks up a localized string similar to The default value to use when the Schema restriction is omitted from GetSchema calls.  The initial default is an empty string (no restriction)..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_EnableTrace">
            <summary>
              Looks up a localized string similar to When set to 1 or higher, enables tracing. When set to 0, tracing is disabled..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_Enlist">
            <summary>
              Looks up a localized string similar to When true, the data provider automatically attempts to enlist the connection in creating the thread&apos;s current transaction context..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_GssClient">
            <summary>
              Looks up a localized string similar to Specifies which GSS client library the provider should use to communicate with the Key Distribution Center (KDC) when authentication in a MIT Kerberos environment.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_HostNameInCertificate">
            <summary>
              Looks up a localized string similar to Defines the host name in the certificate used as part of the SSL Server Certificate validation..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_InitialCommandTimeout">
            <summary>
              Looks up a localized string similar to The initial (default) CommandTimeout for commands that use this connection.  Setting the CommandTimeout property on the command will override this option..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_LicensePath">
            <summary>
              Looks up a localized string similar to The fully qualified path to the NetSuite.lic license file..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_LoadBalanceTimeout">
            <summary>
              Looks up a localized string similar to The time (from 1 to 65535 seconds, or 0 for unlimited time) to keep connections in a connection pool. .
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_LoadBalancing">
            <summary>
              Looks up a localized string similar to When true, client load balancing is used in attempts to connect to primary and alternate database servers..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_MaxPoolSize">
            <summary>
              Looks up a localized string similar to The maximum number of connections within a single pool..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_MinPoolSize">
            <summary>
              Looks up a localized string similar to The minimum number of connections that are opened and placed in a connection pool when it is created..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ParameterMode">
            <summary>
              Looks up a localized string similar to When set to ANSI, &apos;?&apos; are processed as Parameter Markers and bound ordinally. When set to BindByOrdinal, native parameters markers are used and bound ordinally. When set to BindByName, native parameter markers are used and bound by name..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_PersistSecurityInfo">
            <summary>
              Looks up a localized string similar to When true, secure information is displayed in clear text in the ConnectionString property of the Connection object..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_Pooling">
            <summary>
              Looks up a localized string similar to When true, connections are pooled..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ReauthenticationEnabled">
            <summary>
              Looks up a localized string similar to Specifies if a provider may Reauthenticate.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_SchemaCollectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted schema collection operation to the server will fail if not yet completed..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_SchemaOptions">
            <summary>
              Looks up a localized string similar to Specifies a schema option that influences how a provider returns schema meta data..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ThrottleCollectionsData">
            <summary>
              Looks up a localized string similar to Specifies whether a provider returns very large collection meta data..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_TraceFile">
            <summary>
              Looks up a localized string similar to The path and name of the trace file..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_UseCurrentSchema">
            <summary>
              Looks up a localized string similar to Indicates whether the schema collections should automatically restrict using the current schema when the schema restriction is omitted..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.Description_ValidateServerCertificate">
            <summary>
              Looks up a localized string similar to Specifies whether the server certificate is verified as valid according to a Certificate Authority..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.EMPTY_DATABASE_NAME">
            <summary>
              Looks up a localized string similar to Database cannot be null, the empty string, or string of only whitespace..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.ENLIST_FAILED">
            <summary>
              Looks up a localized string similar to Error occured when enlisting connection in distributed transaction..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_ERROR">
            <summary>
              Looks up a localized string similar to Security Services Error: {0}.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_APPL_EXPIRED">
            <summary>
              Looks up a localized string similar to This application has expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_BAD_ENCTYPE">
            <summary>
              Looks up a localized string similar to Bad encryption type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_BAD_KEYSIZE">
            <summary>
              Looks up a localized string similar to Key size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_BAD_MSIZE">
            <summary>
              Looks up a localized string similar to Message size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_BADMSGTYPE">
            <summary>
              Looks up a localized string similar to Invalid message type specified for encoding.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_BADNAME">
            <summary>
              Looks up a localized string similar to Credential cache name malformed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_END">
            <summary>
              Looks up a localized string similar to End of credential cache reached.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in credentials cache.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_IO">
            <summary>
              Looks up a localized string similar to Credentials cache I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_NOMEM">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in credentials cache code).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_NOTFOUND">
            <summary>
              Looks up a localized string similar to Matching credential not found.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Credentials cache type is already registered..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown credential cache type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CC_WRITE">
            <summary>
              Looks up a localized string similar to Error writing to credentials cache.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported credentials cache format version number.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CHPW_FAIL">
            <summary>
              Looks up a localized string similar to Password change failed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CHPW_PWDNULL">
            <summary>
              Looks up a localized string similar to New password cannot be zero length.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CONFIG_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of Kerberos configuration file.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CONFIG_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find Kerberos configuration file.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CONFIG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to No supported encryption types (config file error?).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CONFIG_NODEFREALM">
            <summary>
              Looks up a localized string similar to Configuration file does not specify default realm.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CONFIG_NOTENUFSPACE">
            <summary>
              Looks up a localized string similar to Insufficient space to return complete information.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_CRYPTO_INTERNAL">
            <summary>
              Looks up a localized string similar to Cryptosystem internal error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_EAI_FAIL">
            <summary>
              Looks up a localized string similar to unknown getaddrinfo failure.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_EAI_NODATA">
            <summary>
              Looks up a localized string similar to no data available for host/domain name.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_EAI_NONAME">
            <summary>
              Looks up a localized string similar to host/domain name not found.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_EAI_SERVICE">
            <summary>
              Looks up a localized string similar to service name unknown.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_ERR_BAD_HOSTNAME">
            <summary>
              Looks up a localized string similar to Hostname cannot be canonicalized.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_ERR_HOST_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot determine realm for host.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_ERR_NUMERIC_REALM">
            <summary>
              Looks up a localized string similar to Cannot determine realm for numeric host address.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_ERR_RCSID">
            <summary>
              Looks up a localized string similar to (RCS Id string for the krb5 error table).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_FCC_INTERNAL">
            <summary>
              Looks up a localized string similar to Internal credentials cache error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_FCC_NOFILE">
            <summary>
              Looks up a localized string similar to No credentials cache found.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_FCC_PERM">
            <summary>
              Looks up a localized string similar to Credentials cache file permissions incorrect.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_FWD_BAD_PRINCIPAL">
            <summary>
              Looks up a localized string similar to Bad principal name while trying to forward credentials.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_GET_IN_TKT_LOOP">
            <summary>
              Looks up a localized string similar to Looping detected inside krb5_get_in_tkt.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_IN_TKT_REALM_MISMATCH">
            <summary>
              Looks up a localized string similar to Client/server realm mismatch in initial ticket request.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_INVALID_FLAGS">
            <summary>
              Looks up a localized string similar to Invalid KDC option combination (library internal error) [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KDC_UNREACH">
            <summary>
              Looks up a localized string similar to Cannot contact any KDC for requested realm.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KDCREP_MODIFIED">
            <summary>
              Looks up a localized string similar to KDC reply did not match expectations.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KDCREP_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great in KDC reply.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KEYTAB_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported key table format version number.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_BADNAME">
            <summary>
              Looks up a localized string similar to Key table name malformed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_END">
            <summary>
              Looks up a localized string similar to End of key table reached.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in keytab.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_IOERR">
            <summary>
              Looks up a localized string similar to Error writing to key table.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_KVNONOTFOUND">
            <summary>
              Looks up a localized string similar to Key version number for principal in key table is incorrect.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_NAME_TOOLONG">
            <summary>
              Looks up a localized string similar to Keytab name too long.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_NOTFOUND">
            <summary>
              Looks up a localized string similar to Key table entry not found.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_NOWRITE">
            <summary>
              Looks up a localized string similar to Cannot write to specified key table.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Key table type is already registered..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_KT_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown Key table type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LIB_EXPIRED">
            <summary>
              Looks up a localized string similar to This Krb5 library has expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LIBOS_BADLOCKFLAG">
            <summary>
              Looks up a localized string similar to Invalid flag for file lock mode.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LIBOS_BADPWDMATCH">
            <summary>
              Looks up a localized string similar to Password mismatch.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LIBOS_CANTREADPWD">
            <summary>
              Looks up a localized string similar to Cannot read password.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LIBOS_PWDINTR">
            <summary>
              Looks up a localized string similar to Password read interrupted.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LNAME_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of translation database entry.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LNAME_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find lname translation database.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_LNAME_NOTRANS">
            <summary>
              Looks up a localized string similar to No translation available for requested principal.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_MUTUAL_FAILED">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NO_2ND_TKT">
            <summary>
              Looks up a localized string similar to Request missing second ticket [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NO_LOCALNAME">
            <summary>
              Looks up a localized string similar to No local name found for principal name.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NO_TKT_IN_RLM">
            <summary>
              Looks up a localized string similar to Cannot find ticket for requested realm.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NO_TKT_SUPPLIED">
            <summary>
              Looks up a localized string similar to Request did not supply a ticket.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NOCREDS_SUPPLIED">
            <summary>
              Looks up a localized string similar to No credentials supplied to library routine.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_NOPERM_ETYPE">
            <summary>
              Looks up a localized string similar to Encryption type not permitted.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_OBSOLETE_FN">
            <summary>
              Looks up a localized string similar to Program called an obsolete, deleted function.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PARSE_ILLCHAR">
            <summary>
              Looks up a localized string similar to Illegal character in component name.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PARSE_MALFORMED">
            <summary>
              Looks up a localized string similar to Malformed representation of principal.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PREAUTH_BAD_TYPE">
            <summary>
              Looks up a localized string similar to Unsupported preauthentication type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Generic preauthentication failure.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PREAUTH_NO_KEY">
            <summary>
              Looks up a localized string similar to Required preauthentication key not supplied.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PRINC_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested principal and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PROG_ATYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for address type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PROG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for encryption type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PROG_KEYTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for key type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_PROG_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for checksum type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO">
            <summary>
              Looks up a localized string similar to Replay I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_EOF">
            <summary>
              Looks up a localized string similar to End-of-file on replay cache I/O.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_IO">
            <summary>
              Looks up a localized string similar to I/O error in replay cache i/o code.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache I/O code).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_PERM">
            <summary>
              Looks up a localized string similar to Permission denied in replay cache code.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_SPACE">
            <summary>
              Looks up a localized string similar to Insufficient system space to store replay information.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_IO_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC/IO error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache code).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_NOIO">
            <summary>
              Looks up a localized string similar to Replay cache type does not support non-volatile storage.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_PARSE">
            <summary>
              Looks up a localized string similar to Replay cache name parse/format error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_REPLAY">
            <summary>
              Looks up a localized string similar to Message is a replay.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_REQUIRED">
            <summary>
              Looks up a localized string similar to Message replay detection requires rcache parameter.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Replay cache type is already registered.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_TYPE_NOTFOUND">
            <summary>
              Looks up a localized string similar to Replay cache type is unknown.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RC_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_RCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported replay cache format version number.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_REALM_CANT_RESOLVE">
            <summary>
              Looks up a localized string similar to Cannot resolve KDC for requested realm.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot find KDC for requested realm.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SAM_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to Bad SAM flags in obtain_sam_padata.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAPPLVERS">
            <summary>
              Looks up a localized string similar to Bad application version was sent (via sendauth).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAUTHVERS">
            <summary>
              Looks up a localized string similar to Bad sendauth version was sent.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADRESPONSE">
            <summary>
              Looks up a localized string similar to Bad response (during sendauth exchange).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SENDAUTH_REJECTED">
            <summary>
              Looks up a localized string similar to Server rejected authentication (during sendauth exchange).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SERVICE_UNKNOWN">
            <summary>
              Looks up a localized string similar to Kerberos service unknown.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_SNAME_UNSUPP_NAMETYPE">
            <summary>
              Looks up a localized string similar to Conversion to service principal undefined for name type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_TKT_NOT_FORWARDABLE">
            <summary>
              Looks up a localized string similar to Requesting ticket can&apos;t get forwardable tickets.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_TRANS_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of realm translation file.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_TRANS_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find realm translation file.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5_WRONG_ETYPE">
            <summary>
              Looks up a localized string similar to Requested encryption type not used in message.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5DES_BAD_KEYPAR">
            <summary>
              Looks up a localized string similar to DES key has bad parity.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5DES_WEAK_KEY">
            <summary>
              Looks up a localized string similar to DES key is a weak key.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_BAD_PVNO">
            <summary>
              Looks up a localized string similar to Requested protocol version not supported.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_BADOPTION">
            <summary>
              Looks up a localized string similar to KDC can&apos;t fulfill requested option.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_C_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Client&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Client not found in Kerberos database.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_CANNOT_POSTDATE">
            <summary>
              Looks up a localized string similar to Ticket is ineligible for postdating.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_NOTYET">
            <summary>
              Looks up a localized string similar to Client not yet valid - try again later.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_REVOKED">
            <summary>
              Looks up a localized string similar to Clients credentials have been revoked.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for encryption type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_KEY_EXP">
            <summary>
              Looks up a localized string similar to Password has expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_NAME_EXP">
            <summary>
              Looks up a localized string similar to Client&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_NEVER_VALID">
            <summary>
              Looks up a localized string similar to Requested effective lifetime is negative or too short.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_NULL_KEY">
            <summary>
              Looks up a localized string similar to Client or server has a null key.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_PADATA_TYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for padata type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_POLICY">
            <summary>
              Looks up a localized string similar to KDC policy rejects request.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Preauthentication failed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_REQUIRED">
            <summary>
              Looks up a localized string similar to Additional pre-authentication required.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE">
            <summary>
              Looks up a localized string similar to Principal has multiple entries in Kerberos database.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_S_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Server&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Server not found in Kerberos database.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVER_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested server and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_EXP">
            <summary>
              Looks up a localized string similar to Server&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_NOTYET">
            <summary>
              Looks up a localized string similar to Server not yet valid - try again later.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_REVOKED">
            <summary>
              Looks up a localized string similar to Credentials for server have been revoked.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for checksum type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_TGT_REVOKED">
            <summary>
              Looks up a localized string similar to TGT has been revoked.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KDC_ERR_TRTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for transited type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BAD_INTEGRITY">
            <summary>
              Looks up a localized string similar to Decrypt integrity check failed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADADDR">
            <summary>
              Looks up a localized string similar to Incorrect net address.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADDIRECTION">
            <summary>
              Looks up a localized string similar to Incorrect message direction.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADKEYVER">
            <summary>
              Looks up a localized string similar to Key version is not available.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADMATCH">
            <summary>
              Looks up a localized string similar to Ticket/authenticator don&apos;t match.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADORDER">
            <summary>
              Looks up a localized string similar to Message out of order.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADSEQ">
            <summary>
              Looks up a localized string similar to Incorrect sequence number in message.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADVERSION">
            <summary>
              Looks up a localized string similar to Protocol version mismatch.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_ILL_CR_TKT">
            <summary>
              Looks up a localized string similar to Illegal cross-realm ticket.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_INAPP_CKSUM">
            <summary>
              Looks up a localized string similar to Inappropriate type of checksum in message.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_METHOD">
            <summary>
              Looks up a localized string similar to Alternative authentication method required.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MODIFIED">
            <summary>
              Looks up a localized string similar to Message stream modified.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MSG_TYPE">
            <summary>
              Looks up a localized string similar to Invalid message type.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MUT_FAIL">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOKEY">
            <summary>
              Looks up a localized string similar to Service key not available.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOT_US">
            <summary>
              Looks up a localized string similar to The ticket isn&apos;t for us.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_REPEAT">
            <summary>
              Looks up a localized string similar to Request is a replay.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_EXPIRED">
            <summary>
              Looks up a localized string similar to Ticket expired.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_INVALID">
            <summary>
              Looks up a localized string similar to Ticket has invalid flag set.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_NYV">
            <summary>
              Looks up a localized string similar to Ticket not yet valid.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_V4_REPLY">
            <summary>
              Looks up a localized string similar to Initial Ticket response appears to be Version 4 error.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_PATH_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to Policy rejects transited path.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_AP_WRONG_PRINC">
            <summary>
              Looks up a localized string similar to Wrong principal in request.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_ERR_FIELD_TOOLONG">
            <summary>
              Looks up a localized string similar to Field is too long for this implementation.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_ERR_GENERIC">
            <summary>
              Looks up a localized string similar to Generic error (see e-text).
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.GSS_KRB5KRB_ERR_RESPONSE_TOO_BIG">
            <summary>
              Looks up a localized string similar to Response too big for UDP, retry with TCP.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.HELPER_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The {0} assembly with assembly version number of {1} failed to load.  .
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_COLUMN_INDEX">
            <summary>
              Looks up a localized string similar to The index specified must non-negative and less than the number of columns in the reader..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_CONNECTION_OPTION_VALUE">
            <summary>
              Looks up a localized string similar to Invalid value for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_ENUMERATION_VALUE">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is invalid..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_MIN_MAX_POOL_SIZE_VALUES">
            <summary>
              Looks up a localized string similar to Invalid min or max pool size values, min pool size cannot be greater than the max pool size..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_OFFSET_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Offset value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_PARAMETER_DBTYPE">
            <summary>
              Looks up a localized string similar to Invalid parameter DbType..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_PARAMETER_DIRECTION">
            <summary>
              Looks up a localized string similar to Invalid parameter direction..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_PARAMETER_SIZE">
            <summary>
              Looks up a localized string similar to Invalid parameter size..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_PARAMETER_SOURCE">
            <summary>
              Looks up a localized string similar to Invalid parameter source..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.INVALID_SIZE_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Size value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.KEYWORD_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Keyword not supported: {0}..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.MISSING_RESTRICTION_DEFAULT">
            <summary>
              Looks up a localized string similar to Missing restriction default..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.MUTUALLY_EXCLUSIVE_OPTIONS">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option and the &apos;{1}&apos; option cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NAMED_PARAMETER_MARKER_MISMATCH">
            <summary>
              Looks up a localized string similar to Named parameter marker mismatch. Cannot match named parameter marker {0} within the Parameter collection.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NEED_ADAPTER">
            <summary>
              Looks up a localized string similar to The DataAdapter.SelectCommand property needs to be initialized..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NO_DTC_INSTALLATION">
            <summary>
              Looks up a localized string similar to The optional DTC support components cannot be located.  Please make sure you have installed them and that they are on your path.  See the product documentation for more details..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NO_DTC_LICENSE">
            <summary>
              Looks up a localized string similar to The NetSuite ADO.NET Data Provider you are attempting to use is not licensed for use in Distributed Transactions.  A Server license is required for this feature.  If you would like to purchase a Server license, please call 800-876-3101 or visit NetSuite at www.NetSuite-Technologies.com..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NO_DTC_SUPPORT_PLATFORM">
            <summary>
              Looks up a localized string similar to The DTC is only supported on Windows 2000 or later..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NO_DTC_TRANSACTION">
            <summary>
              Looks up a localized string similar to Not in distributed transaction..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.NO_PARALLEL_TRANSACTIONS">
            <summary>
              Looks up a localized string similar to Parallel transactions not supported..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.OBJECT_DISPOSED">
            <summary>
              Looks up a localized string similar to Cannot use a disposed object..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.ODBC_CALL_ESCAPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to ODBC CALL escape is not supported..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.OPEN_CONNECTION_PROPERTY_SET">
            <summary>
              Looks up a localized string similar to Not allowed to change the &apos;{0}&apos; property. {1}.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.QUERY_FAILED">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because execution of the command failed with the following error: {1}.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.READER_NOT_ON_ROW">
            <summary>
              Looks up a localized string similar to Operation not supported when reader is not positioned to a row..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.READER_OPEN">
            <summary>
              Looks up a localized string similar to A DataReader object is already open for this command..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.REQUIRED_ARGUMENT_WAS_NULL">
            <summary>
              Looks up a localized string similar to A required argument was null..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.REQUIRED_RESTRICTION_NOT_SPECIFIED">
            <summary>
              Looks up a localized string similar to The required restriction, {0}, was not specified..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.SUPERSEDED_OPTIONS_CANT_COEXIST">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option has been superseded by the &apos;{1}&apos; option. They cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TOO_MANY_RESTRICTIONS">
            <summary>
              Looks up a localized string similar to More restrictions were provided than the requested schema (&apos;{0}&apos;) supports..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TRANSACTION_CONNECTION_MISMATCH">
            <summary>
              Looks up a localized string similar to The transaction object for this command does not match the connection object for this command..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TRANSACTION_PRESENT">
            <summary>
              Looks up a localized string similar to Cannot enlist in the distributed transaction because an existing transaction is in progress on the connection.  Finish existing transaction and retry..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TRANSACTION_REQURED">
             <summary>
               Looks up a localized string similar to Execute requires the command to have a
            transaction object when the connection assigned to the command is in a
            pending local transaction.  The Transaction property of the command has
            not been initialized..
             </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TRANSACTION_ZOMBIED">
            <summary>
              Looks up a localized string similar to Operation invalid on a inactive transaction object..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.TXN_NOT_ACTIVE">
            <summary>
              Looks up a localized string similar to Transaction already commited or rolled back..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UNDEFINED_COLLECTION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not defined..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UNSUPPORTED_PARAMETER_MODE">
            <summary>
              Looks up a localized string similar to Unsupported Parameter Mode. Uses are restricted to ANSI, BindByOrdinal or BindByName.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UNSUPPORTED_VERSION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not supported by this version of the provider..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_BINDINGS">
            <summary>
              Looks up a localized string similar to Incorrect channel bindings were supplied..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_MECH">
            <summary>
              Looks up a localized string similar to The requested mechanism is unavailable..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_NAME">
            <summary>
              Looks up a localized string similar to An invalid name was supplied..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_NAMETYPE">
            <summary>
              Looks up a localized string similar to A supplied name was of an unsupported type..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_QOP">
            <summary>
              Looks up a localized string similar to The requested quality of protection could not be provided by the context..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_SIG">
            <summary>
              Looks up a localized string similar to A token had an invalid MIC..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BAD_STATUS">
            <summary>
              Looks up a localized string similar to An invalid status code was supplied..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_BUFFER_OVERFLOW">
            <summary>
              Looks up a localized string similar to Output buffer overflow.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_CONTEXT_EXPIRED">
            <summary>
              Looks up a localized string similar to The context has already expired..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_CREDENTIALS_EXPIRED">
            <summary>
              Looks up a localized string similar to The credentials could not be acquired because they have expired..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_DEFECTIVE_CREDENTIAL">
            <summary>
              Looks up a localized string similar to The referenced credentials were invalid..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_DEFECTIVE_TOKEN">
            <summary>
              Looks up a localized string similar to Consistency checks on input token failed..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_DUPLICATE_ELEMENT">
            <summary>
              Looks up a localized string similar to The requested credential element already exists..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_FAILURE">
            <summary>
              Looks up a localized string similar to Unspecified error at the GSS layer..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_NAME_NOT_MN">
            <summary>
              Looks up a localized string similar to The provided name was not a mechanism name..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_NO_CONTEXT">
            <summary>
              Looks up a localized string similar to No context has been established..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_NO_CRED">
            <summary>
              Looks up a localized string similar to No credentials were found for the specified name..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_NO_SERVICE_PRINCIPLE">
            <summary>
              Looks up a localized string similar to No Service Principle Name.
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_UNAUTHORIZED">
            <summary>
              Looks up a localized string similar to The operation is forbidden by local security policy..
            </summary>
        </member>
        <member name="P:NetSuite.Common.CommonStrings.UT_GSS_UNAVAILABLE">
            <summary>
              Looks up a localized string similar to The operation is unavailable..
            </summary>
        </member>
        <member name="F:DDInt.Common.CommonTimestampEscape.m_value">
            Time/date/timestamp value.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral ...
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.validateValue">
            Validate the time/date/timestamp value, since the parser only
            recognizes a string literal.  The contents of the string literal
            were not checked.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getYear">
             Returns the year (yyyy) value for the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the year value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMonth">
             Returns the month (mm) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the month value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDay">
             Returns the day (dd) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the day value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getHour">
             Returns the hour (hh) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the hour value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMinutes">
             Returns the minutes (mm) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the minutes value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getSeconds">
             Returns the seconds (ss) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the seconds value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonTimestampEscape.getSecondsFraction" -->
        <member name="M:DDInt.Common.CommonTimestampEscape.getTimestamp">
             Returns the timestamp value in the ODBC format
             (yyyy-mm-dd hh:mm:ss[.f...]).
            
             @return the timestamp value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getTime">
             Returns the time value in the ODBC format (hh:mm:ss[.f...]).
            
             @return the time value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDate">
             Returns the date value in the ODBC format (yyyy-mm-dd).
            
             @return the date value in the ODBC format.
        </member>
        <member name="T:DDInt.Common.CommonTrace">
            <summary>
            The Connect for .NET Provider supports tracing through the CommonTrace class.
            The provider can trace all of its method calls and the returns from those
            method calls to a trace file specified by the user.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.SetEnableTrace(System.Int32)">
            <summary>
            The EnableTrace() property enables tracing. The default is 0 (disabled).
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.DumpFootprints">
            <summary>
            The DumpFootprints() method displays the footprint of all source files
            in a data provider.
            </summary>
        </member>
        <member name="P:DDInt.Common.CommonTrace.TraceFile">
            <summary>
            The TraceFile property gets or sets the name of the trace output file.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonUtility.BytesToString(System.Byte[],System.Int32)">
             This method accepts a byte array and constructs a string which
             represents the contents of the byte array. For instance, a byte
             array containing 0x6162 (two bytes) is returned as the string
             "6162" (four characters).
            
             @param bytes The array which contains the bytes representing
             the UCS2 characters.
            
             @param len The number of "relevant" bytes in the array.
        </member>
        <member name="M:DDInt.Common.CommonUtility.ByteToHex(System.Byte)">
             Used to convert a single byte into a string which contains
             its hexadecimal representation.
            
             @param b The value of the byte whose hexadecimal representation is to
             be constructed.
        </member>
        <member name="T:DDInt.License.LicFile">
            <summary>
            Summary description for LicenseFile.
            </summary>
        </member>
        <member name="T:DDInt.License.LicProvider">
            <summary>
            Class that contains per provider info.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.net.Session_Managed.abortParamsToOpenAccess">
            
            Convert abort parameters to a Session_Managed manager error error number (2200-2500).
            abortParamsToSuiteAnalyticsConnect is only used to translate server errors, all the client
            error are removed from gDiagAbort
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.net.Session_Managed.AbortReason">
            Abort reasons. Could come from server!
            Keep in sync with C-Session_Managed manager!
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.net.TrEndPoint.send(System.Byte[],System.Int32,System.Int32)">
            Send buffer
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessBigIntColumn">
            <summary>
            Implements BigInt columns.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimalColumn">
            <summary>
            Implements decimal columns.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn">
            <summary>
            Internal class that implements an suiteanalyticsconnect variable (cursor, in, out, ...)
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.getKind">
            Implementation of Variable.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.isLong">
            Implementation of Variable.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.writeDefinitionOn(NetSuite.SuiteAnalyticsConnect.ssp.SspWriter)">
            <summary>
            Implementation of Variable.
            Called during EXTENDED DEFINE encoding.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.readObjectAndIndicatorFrom(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            Implementation of Variable.
            Reads cursor variable from stream.
            Called during decoding of fetch.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.position">
            Returns variable number ( 1-based )
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessColumn.rows">
            Returns # of rows
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimalColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimalColumn.readObjectAndIndicatorFrom(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            Implementation of Variable.
            Reads cursor variable from stream.
            Called during decoding of fetch.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessBigIntColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessBigIntColumn.readObjectAndIndicatorFrom(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            Implementation of Variable.
            Reads cursor variable from stream.
            Called during decoding of fetch.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessBlobColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCategoryAttribute.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCharColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCharColumn.readObjectAndIndicatorFrom(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            Implementation of Variable.
            Reads cursor variable from stream.
            Called during decoding of fetch.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessVarCharColumn.readObjectAndIndicatorFrom(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            Implementation of Variable.
            Reads cursor variable from stream.
            Called during decoding of fetch.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessClobColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessClongColumn">
            <summary>
            Implements LONG CHAR columns ( LONGVARCHAR, LONGVARGRAPHIC )
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessLongColumn">
            <summary>
            Base class for LONG columns ( LONGVARCHAR, LONGVARBINARY, LONGVARGRAPHIC )
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessLongColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessClongColumn.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection">
            <summary>
            Summary description for OpenAccessColumnCollection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.readNormalVariables(NetSuite.SuiteAnalyticsConnect.ssp.SspReader,System.Int32)">
            <summary>
            VariableList implementation.
            See VariableList.
            This one gets called during FETCH
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.Insert(System.Int32,System.Object)">
            IList implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.Remove(System.Object)">
            IList implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.countNormalVariables">
            <summary>
            VariableList implementation.
            See VariableList.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.defineNormalVariables(NetSuite.SuiteAnalyticsConnect.ssp.SspWriter)">
            <summary>
            VariableList implementation.
            See VariableList.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.hasNormalVariables">
            <summary>
            VariableList implementation.
            See VariableList.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.hasLongVariables">
            <summary>
            Returns true if collection has long variables
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.readOutputVariables(NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            <summary>
            VariableList implementation.
            See VariableList.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.writeInputVariables(NetSuite.SuiteAnalyticsConnect.ssp.SspWriter,System.Int32)">
            <summary>
            VariableList implementation.
            See VariableList.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.describeCursor(NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap[],DDInt.Parser.BaseSQL,System.Boolean,System.Int32)">
             <summary>
             Describes cursor variables.
            
             The column collection is populated based on the describe map.
             </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessColumnCollection.addColumn(NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap,DDInt.Parser.BaseSQL,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adds a new column to the collection.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder">
            <summary>Automatically generates single-table 
            commands that are used to reconcile changes made to a DataSet with 
            the associated database. A OpenAccessCommandBuilder object is associated with a 
            OpenAccessDataAdapter object.
            </summary>
            <remarks>
            Using a CommandBuilder object can have a negative effect on 
            performance. Because of concurrency restrictions, the 
            CommandBuilder does not generate efficient SQL statements. 
            The end-user can often write more efficient update and delete 
            statements than those that the CommandBuilder generates.
            </remarks>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the OpenAccessCommandBuilder class.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter)">
            <summary>
            Initializes a new instance of the OpenAccessCommandBuilder class.
            </summary>
            <param name="adapter">
            The OpenAccessDataAdapter object 
            associated with this OpenAccessCommandBuilder. </param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.DeriveParameters(NetSuite.SuiteAnalyticsConnect.OpenAccessCommand)">
            <summary>
            Retrieves parameter information 
            from the stored procedure specified in the OpenAccessCommand 
            and populates the OpenAccessCommand object's Parameters collection. 
            </summary>
            <param name="command">The OpenAccessCommand referencing the 
            stored procedure from which the parameter information is to be derived. 
            The derived parameters are added to the OpenAccessCommand object's 
            Parameters collection. 
            </param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically-generated 
            OpenAccessCommand object required to perform Deletes on the SuiteAnalyticsConnect database.
            </summary>
            <returns>The automatically generated OpenAccessCommand object required to 
            perform Deletes on the SuiteAnalyticsConnect database.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically-generated 
            OpenAccessCommand object required to perform Inserts on the SuiteAnalyticsConnect database
            </summary>
            <returns>The automatically generated OpenAccessCommand object required to 
            perform Inserts on the SuiteAnalyticsConnect database.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically-generated 
            OpenAccessCommand object required to perform Updates on the SuiteAnalyticsConnect database
            </summary>
            <returns>The automatically generated OpenAccessCommand object required to 
            perform Updates on the SuiteAnalyticsConnect database.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
            </summary>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>
            <returns>The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. 
            </summary>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
            <returns>The unquoted identifier, with embedded quotes properly un-escaped.</returns>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.CatalogLocation">
            <summary>
            Sets or gets the CatalogLocation for an instance of the OpenAccessCommandBuilder class.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.CatalogSeparator">
            <summary>
            Sets or gets a string used as the catalog separator 
            for an instance of the OpenAccessCommandBuilder class. 
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.DataAdapter">
            <summary>
            Gets or sets the OpenAccessDataAdapter object for which 
            this OpenAccessCommandBuilder object will generate SQL statements.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.SchemaSeparator">
            <summary>
            Gets or sets the character to be used for the separator between 
            the schema identifier and any other identifiers.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.QuotePrefix">
            <summary>
            Prefix character for quoted identifiers.  This is limited to double quote.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommandBuilder.QuoteSuffix">
            <summary>
            Suffix character for quoted identifiers.  This is limited to double quote.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter">
            <summary>
            The OpenAccessDataAdapter object represents a set of data commands 
            and a connection to an SuiteAnalyticsConnect server that are used to fill the 
            DataSet and update the SuiteAnalyticsConnect server.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.#ctor">
            <summary>
            Initializes a new instance of the OpenAccessDataAdapter class.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessCommand)">
            <summary>
            Initializes a new instance of the OpenAccessDataAdapter class.
            </summary>
            <param name="selectCommand">A SQL statement used to select
            records in the SuiteAnalyticsConnect database.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the OpenAccessDataAdapter class.
            </summary>
            <param name="selectCommandText">
            A SQL statement used to select records in the SuiteAnalyticsConnect database.
            </param>
            <param name="selectConnectionString">The connection string.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessConnection)">
            <summary>
            Initializes a new instance of the OpenAccessDataAdapter class.
            </summary>
            <param name="selectCommandText">A SQL 
            statement used to select records in the SuiteAnalyticsConnect database.</param>
            <param name="selectConnection">The open connection to the SuiteAnalyticsConnect database.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdated event of the SuiteAnalyticsConnect data provider. 
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The SQL command to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdating event of the SuiteAnalyticsConnect data provider.
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The SQL command to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raises the RowUpdating event.
            </summary>
            <param name="value">A System.Data.Common.RowUpdatingEventArgs object that contains the event data.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raises the RowUpdated event.
            </summary>
            <param name="value">A System.Data.Common.RowUpdatedEventArgs object that contains the event data.</param>
        </member>
        <member name="E:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.RowUpdating">
            <summary>
            Occurs during an Update before a command
            is executed against the SuiteAnalyticsConnect database.
            </summary>
        </member>
        <member name="E:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.RowUpdated">
            <summary>
            Represents the method that 
            will handle the RowUpdated event of a OpenAccessDataAdapter.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.SelectCommand">
            <summary>
            Gets or sets a SQL statement used to select
            records in the SuiteAnalyticsConnect database.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.InsertCommand">
            <summary>
            Gets or sets a SQL statement that is used 
            to insert new records into the SuiteAnalyticsConnect database.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.UpdateCommand">
            <summary>
            Gets or sets a SQL statement that is used to
            update records in the SuiteAnalyticsConnect database.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataAdapter.DeleteCommand">
            <summary>
            Gets or sets a SQL statement that is used for
            deleting records from the SuiteAnalyticsConnect datasource.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatingEventHandler">
            <summary>
            Represents the method that 
            will handle the RowUpdating event of a OpenAccessDataAdapter.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatedEventHandler">
            <summary>
            Represents the method that 
            will handle the RowUpdated event of a OpenAccessDataAdapter.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatingEventArgs">
            <summary>
            Provides data for the RowUpdating 
            event of the SuiteAnalyticsConnect data provider.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdated event 
            of the SuiteAnalyticsConnect data provider.
            </summary>
            <param name="row">The DataRow to send through an Update.</param>
            <param name="command">The SqlCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatingEventArgs.Command">
            <summary>
            Represents a SQL statement or stored procedure to execute against a SuiteAnalyticsConnect database.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatedEventArgs">
            <summary>
            Provides data for the RowUpdated 
            event of the SuiteAnalyticsConnect data provider.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdated 
            event of the SuiteAnalyticsConnect data provider.
            </summary>
            <param name="row">The DataRow to send through an Update</param>
            <param name="command">The SQL Command to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessRowUpdatedEventArgs.Command">
            <summary>
            Represents a SQL statement or 
            stored procedure to execute against a SuiteAnalyticsConnect database. 
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.footprint">
            <summary>
            footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Close">
            <summary>
            Closes the DataReader. 
            Always call the Close method when you finish using the OpenAccessDataReader.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>A Boolean that is the value of the column.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a
            byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a byte.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified
            column offset into the buffer as an array. It starts at the given buffer
            offset.
            </summary>
            <returns>The actual number of bytes read.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index 
            within the field where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to read the 
            stream of bytes.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a character.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters into
            the buffer as an array, starting from the specified buffer offset of the
            specified column offset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row 
            where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source
            data type.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the source data type.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a DateTime object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a DateTime object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a specified column as a Decimal object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a decimal object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetOpenAccessDecimal(System.Int32)">
            <summary>
            Gets the value of a specified column as a Decimal object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a decimal object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of a specified column as a double-precision
            floating-point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 
            double-precision floating-point number.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetEnumerator">
            <summary>
            Returns an IEnumerator that can be used 
            to iterate through the rows in the data reader.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type 
            of the object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a single-precision, floating-point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a single-precision 
            floating-point number.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a GUID (globally-unique identifier).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a GUID.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
            <returns>The value of the specified column as a 16-bit signed integer</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 32-bit signed integer.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 64-bit signed integer.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetName(System.Int32)">
            <summary>
            Gets the column name of the specified
            column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the column.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetSchemaTable">
            <summary>
            The GetSchemaTable() method returns a DataTable that describes the 
            column metadata of the provider's DataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a string.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a string.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetValue(System.Int32)">
            <summary>
            Gets value of a column at a specified 
            ordinal, returning the value in the column's native format.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value to return.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetValues(System.Object[])">
            <summary>
            Gets all of the attribute columns in the 
            current row.
            </summary>
            <param name="values">An array of type Object into which to copy the 
            attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether 
            the column contains missing values.
            </summary>
            <param name="ordinal">The zero-based cardinal ordinal.</param>
            <returns>true if the specified column value is equivalent to DBNull; 
            otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.NextResult">
            <summary>
            Advances the OpenAccessDataReader object 
            to the next result.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Read">
            <summary>
            Advances the OpenAccessDataReader to the 
            next result.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetProviderSpecificFieldType(System.Int32)">
            <summary>
            Returns the provider-specific field type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The System.Type object that describes the data type of the specified column.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetProviderSpecificValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of System.Object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.GetProviderSpecificValues(System.Object[])">
            <summary>
            Gets all provider-specific attribute columns in the collection for the current
            row.
            </summary>
            <param name="values">An array of System.Object into which to copy the attribute columns.</param>
            <returns>The number of instances of System.Object in the array.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessCommand,NetSuite.SuiteAnalyticsConnect.OpenAccessConnection,System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Constructor. The DataReader is created by a command during ExecuteReader
            </summary>
            <param name="command">
            The command that created this reader.
            </param>
            <param name="connection">
            The associated connection.
            </param>
            <param name="behavior">
            The command behavior
            </param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Finalize">
            <summary>
            Destructor. 
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.AssertReaderIsOpen">
            <summary>
            Check if the reader is open
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Depth">
            <summary>
            Gets a value that shows how deeply 
            the current row is nested.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.FieldCount">
            <summary>
            Gets the number of columns in the 
            current row.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.HasRows">
            <summary>
            Gets a value indicating whether the OpenAccessDataReader has one or
            more rows.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.IsClosed">
            <summary>
            Indicates whether the OpenAccessDataReader 
            is closed.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.RecordsAffected">
            <summary>
            Gets the number of rows 
            changed, inserted, or deleted by executing a SQL statement.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column as an instance of System.Object.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of System.Object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType">
            <summary>Specifies the SuiteAnalyticsConnect for .NET provider-specific data types
            of a property or field, for use in a 
            <see cref="T:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter">OpenAccessParameter</see>.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Char">
            <summary>
            The CHAR data type that contains a fixed-length character 
            string with a maximum size of 2,000 bytes. This maps to String.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Decimal">
            <summary>
            Decimal is a simple type that represents values ranging from 
            1.0 x 10-28 to approximately 7.9 x 10 28 with 28-29 significant digits.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Int">
            <summary>
            Int is an Integer data type representing signed 32-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.SmallInt">
            <summary>
            SmallInt is an Integer data type representing signed 16-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Single">
            <summary>
            Single represents a single-precision floating point number.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Float">
            <summary>
            Single represents a single-precision floating point number.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Double">
            <summary>
            A floating point type representing values 
            with a precision of 15-16 digits.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Date">
            <summary>
            The DATE data type contains a fixed-length 
            representation of a date.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Time">
            <summary>
            Time is date and time data ranging in value from 
            January 1, 1753 to December 31, 9999
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.TimeStamp">
            <summary>
            The TimeStamp data type represents a date and time value
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.VarChar">
            <summary>
            VarChar is used for a variable-length stream of characters.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.LVarChar">
            <summary>
            The LVarChar data type represents a long string value.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Binary">
            <summary>
            The Binary data type is a fixed length stream of binary data.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.VarBinary">
            <summary>
            Varbinary is a variable-length stream of binary data.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.LVarBinary">
            <summary>
            LVarBinary is a long binary value.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.BigInt">
            <summary>
            BigInt is an integer data type representing signed 64-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Byte">
            <summary>
            The Byte data type is an 8-bit unsigned integer ranging in value from 0 to 255.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Bit">
            <summary>
            The Bit data type is a simple type that represents
             Boolean values of true or false.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.NChar">
            <summary>
            The CHAR data type that contains a fixed-length unicode character 
            string.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.NVarChar">
            <summary>
            VarChar is used for a variable-length stream of unicode characters.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.NLVarChar">
            <summary>
            The NLVarChar data type represents a long unicode string value.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Blob">
            <summary>
            The data type for a BLOB data type
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.Clob">
            <summary>
            The data type for a CLOB data type
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType.UniqueIdentifier">
            <summary>
            The data type for a UNIQUE IDENTIFIER data type
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessType">
            <summary>Specifies the SuiteAnalyticsConnect for .NET provider-specific data types
            of a property or field, for use in a 
            <see cref="T:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter">OpenAccessParameter</see>.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Char">
            <summary>
            The CHAR data type that contains a fixed-length character 
            string with a maximum size of 2,000 bytes. This maps to String.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Decimal">
            <summary>
            Decimal is a simple type that represents values ranging from 
            1.0 x 10-28 to approximately 7.9 x 10 28 with 28-29 significant digits.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Int">
            <summary>
            Int is an Integer data type representing signed 32-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.SmallInt">
            <summary>
            SmallInt is an Integer data type representing signed 16-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Float">
            <summary>
            Single represents a single-precision floating point number.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Double">
            <summary>
            A floating point type representing values 
            with a precision of 15-16 digits.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Date">
            <summary>
            The DATE data type contains a fixed-length 
            representation of a date.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Time">
            <summary>
            Time is date and time data ranging in value from 
            January 1, 1753 to December 31, 9999
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.TimeStamp">
            <summary>
            The TimeStamp data type represents a date and time value
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.VarChar">
            <summary>
            VarChar is used for a variable-length stream of characters.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.LVarChar">
            <summary>
            The LVarChar data type represents a long string value.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Binary">
            <summary>
            The Binary data type is a fixed length stream of binary data.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.VarBinary">
            <summary>
            Varbinary is a variable-length stream of binary data.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.LVarBinary">
            <summary>
            LVarBinary is a long binary value.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.BigInt">
            <summary>
            BigInt is an integer data type representing signed 64-bit integers.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Byte">
            <summary>
            The Byte data type is an 8-bit unsigned integer ranging in value from 0 to 255.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Bit">
            <summary>
            The Bit data type is a simple type that represents
             Boolean values of true or false.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Blob">
            <summary>
            The data type for a BLOB data type
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.Clob">
            <summary>
            The data type for a CLOB data type
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.NChar">
            <summary>
            The NCHAR data type that contains a fixed-length unicode character 
            string with a maximum size of 2,000 bytes. This maps to String.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.NVarChar">
            <summary>
            VarChar is used for a variable-length string of unicode characters.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessType.NLVarChar">
            <summary>
            The LVarChar data type represents a long unicode string value.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.TypeMappings">
            <summary>
            Contains type mappings between OpenAccessDbType, DbType, Ssp,ServiceType
            and System.Type.
            For type mappings from and to Ssp.Type, look in Ssp.cs. (These are defined
            by the SSP protocol, and cannot be altered)
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.TypeMappings.sqlnk2clr(NetSuite.SuiteAnalyticsConnect.OpenAccessDbType)">
            Converts ServiceType to CLR type (checked) (used by Columns)
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.TypeMappings.sqlnk2db(NetSuite.SuiteAnalyticsConnect.OpenAccessDbType)">
            unchecked convertion from OpenAccessDbType to DbType
            See also OpenAccessColumn.service2Exposed
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.TypeMappings.sqlnk2srvc(NetSuite.SuiteAnalyticsConnect.OpenAccessDbType)">
            converts OpenAccessDbType to ServiceType (checked)
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.MaxPrecision">
            <summary>
            A constant representing the largest possible value for the OpenAccessDecimal.Precision
            property.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.MaxScale">
            <summary>
                A constant representing the maximum value for the OpenAccessDecimal.Scale
                property.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Decimal)">
            <summary>
             Initializes a new instance of the OpenAccessDecimal structure
                using the supplied System.Decimal value.
            </summary>
            <param name="value">The System.Decimal value to be stored as a OpenAccessDecimal structure.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Double)">
            <summary>
             Initializes a new instance of the OpenAccessDecimal structure
                using the supplied System.Decimal value.
            </summary>
            <param name="dVal">A double, representing the value for the new OpenAccessDecimal structure.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Int32)">
            <summary>
             Initializes a new instance of the OpenAccessDecimal structure
                using the supplied System.Decimal value.
            </summary>
            <param name="value">The supplied integer value which will the used as the value of the new OpenAccessDecimal structure.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Int64)">
            <summary>
             Initializes a new instance of the OpenAccessDecimal structure
                using the supplied System.Decimal value.
            </summary>
            <param name="value">The supplied long integer value which will the used as the value of the new OpenAccessDecimal structure.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
            <summary>
             Initializes a new instance of the OpenAccessDecimal structure
                using the supplied System.Decimal value.
            </summary>
            <param name="bPrecision">The maximum number of digits that can be used to represent the OpenAccessDecimal.Value
            property of the new OpenAccessDecimal structure.</param>
            <param name="bScale">The number of decimal places to which the OpenAccessDecimal.Value
            property will be resolved for the new OpenAccessDecimal structure.</param> 
            <param name="fPositive">A Boolean value that indicates whether the new OpenAccessDecimal
            structure represents a positive or negative number.</param>
            <param name="bits">The 128-bit unsigned integer that provides the value of the new OpenAccessDecimal.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the OpenAccessDecimal structure using the supplied parameters.
            </summary>
            <param name="bPrecision">The maximum number of digits that can be used to represent the OpenAccessDecimal.Value
            property of the new OpenAccessDecimal structure.</param>
            <param name="bScale">The number of decimal places to which the OpenAccessDecimal.Value
            property will be resolved for the new OpenAccessDecimal structure.</param> 
            <param name="fPositive">A Boolean value that indicates whether the new OpenAccessDecimal
            structure represents a positive or negative number.</param>
            <param name="data1">An 32-bit unsigned integer which will be combined with data2, data3, and
            data4 to make up the 128-bit unsigned integer that represents the new OpenAccessDecimal
            structures value.</param>
            <param name="data2">An 32-bit unsigned integer which will be combined with data1, data3, and
            data4 to make up the 128-bit unsigned integer that represents the new OpenAccessDecimal
            structures value. </param>
            <param name="data3">An 32-bit unsigned integer which will be combined with data1, data2, and
            data4 to make up the 128-bit unsigned integer that represents the new OpenAccessDecimal
            structures value.</param>
            <param name="data4">An 32-bit unsigned integer which will be combined with data1, data2, and
            data3 to make up the 128-bit unsigned integer that represents the new OpenAccessDecimal
            structures value.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_UnaryNegation(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The unary minus operator negates the OpenAccessDecimal parameter.
            </summary>
            <param name="x">The OpenAccessDecimal structure to be negated.</param>
            <returns>A new OpenAccessDecimal structure whose value contains the results of the negation.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Subtraction(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Calculates the results of subtracting the second OpenAccessDecimal
            operand from the first.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose Value property contains
            the results of the subtraction.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Inequality(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
             <summary>
             Performs a logical comparison of the two OpenAccessDecimal
             parameters to determine whether they are not equal.
             </summary>
             <param name="x">A OpenAccessDecimal structure.</param>
             <param name="y">A OpenAccessDecimal structure.</param>
             <returns>
             A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True
            if the two instances are not equal or System.Data.SqlTypes.SqlBoolean.False
            if the two instances are equal. If either instance of OpenAccessDecimal
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean
            will be System.Data.SqlTypes.SqlBoolean.Null. 
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Multiply(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The multiplication operator computes the product of the two OpenAccessDecimal parameters.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property contains the product of the multiplication.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Division(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The division operator computes the division of the two OpenAccessDecimal parameters.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>The division operator calculates the results of dividing the first OpenAccessDecimal
            operand by the second.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Addition(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Calculates the sum of the two OpenAccessDecimal operators.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            property contains the sum.
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_LessThan(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of two OpenAccessDecimal structures to determine whether the first is less than the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than the second instance. Otherwise, System.Data.SqlTypes.SqlBoolean.False. 
            If either instance of OpenAccessDecimal is null, the System.Data.SqlTypes.SqlBoolean.Value 
            of the System.Data.SqlTypes.SqlBoolean will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_LessThanOrEqual(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal parameters to determine whether the first is less than or equal to the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than or equal to the second instance. Otherwise, 
            System.Data.SqlTypes.SqlBoolean.False. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Equality(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal 
            operands to determine whether they are equal.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the two instances are equal or System.Data.SqlTypes.SqlBoolean.False if 
            the two instances are not equal. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_GreaterThan(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of two OpenAccessDecimal structures 
            to determine whether the first is greater than the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than the second instance. Otherwise, System.Data.SqlTypes.SqlBoolean.False. 
            If either instance of OpenAccessDecimal is null, the System.Data.SqlTypes.SqlBoolean.Value 
            of the System.Data.SqlTypes.SqlBoolean will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_GreaterThanOrEqual(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal
            parameters to determine whether the first is greater than or equal to the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is greater than or equal to the second instance. Otherwise, 
            System.Data.SqlTypes.SqlBoolean.False. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(System.Double)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the System.Double parameter to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Double structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose value equals the value 
            of the System.Double parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlBoolean structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlBoolean structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            is equal to the System.Data.SqlTypes.SqlBoolean.ByteValue of the System.Data.SqlTypes.SqlBoolean 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)~System.Decimal">
            <summary>
            Converts the OpenAccessDecimal parameter to System.Decimal.
            </summary>
            <param name="x">The OpenAccessDecimal structure to be converted.</param>
            <returns>
            A new Decimal structure whose value equals the OpenAccessDecimal.Value
            of the OpenAccessDecimal parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlDouble structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlDouble structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            equals the System.Data.SqlTypes.SqlDouble.Value of the System.Data.SqlTypes.SqlDouble 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlSingle structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlSingle structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property equals the System.Data.SqlTypes.SqlSingle.Value of the System.Data.SqlTypes.SqlSingle 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlString parameter to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlString object to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            equals the value represented by the System.Data.SqlTypes.SqlString parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Decimal)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the System.Decimal value to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Decimal value to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property equals the value of the Decimal parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Int64)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Int64 structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Int64 structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property equals the value of the System.Int64 parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlByte structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlByte structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property equals the System.Data.SqlTypes.SqlByte.Value property of the System.Data.SqlTypes.SqlByte 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlInt16 structure to OpenAccessDecimal
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlInt16 structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property equals the System.Data.SqlTypes.SqlInt16.Value property of the System.Data.SqlTypes.SqlInt16 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlInt32 structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlInt32 structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            property is equal to the OpenAccessDecimal.Value property of 
            the System.Data.SqlTypes.SqlInt32 parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the supplied System.Data.SqlTypes.SqlInt64 structure to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlInt64 structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            equals the System.Data.SqlTypes.SqlInt64.Value of the System.Data.SqlTypes.SqlInt64 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal">
            <summary>
            Converts the System.Data.SqlTypes.SqlMoney operand to OpenAccessDecimal.
            </summary>
            <param name="x">The System.Data.SqlTypes.SqlMoney structure to be converted.</param>
            <returns>
            A new OpenAccessDecimal structure whose OpenAccessDecimal.Value 
            equals the System.Data.SqlTypes.SqlMoney.Value of the System.Data.SqlTypes.SqlMoney 
            parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Abs(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The Abs method gets the absolute value of the OpenAccessDecimal parameter.
            </summary>
            <param name="n">A OpenAccessDecimal structure.</param>
            <returns>A OpenAccessDecimal structure whose OpenAccessDecimal.Value
            property contains the unsigned number representing the absolute value of
            the OpenAccessDecimal parameter.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Add(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Calculates the sum of the two OpenAccessDecimal operators.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value property contains the sum.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.AdjustScale(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,System.Int32,System.Boolean)">
            <summary>
            The scale of the OpenAccessDecimal operand will be adjusted
            to the number of digits indicated by the digits parameter. Depending on the
            value of the fRound parameter, the value will either be rounded to the appropriate
            number of digits or truncated.
            </summary>
            <param name="n">The OpenAccessDecimal structure to be adjusted.</param>
            <param name="digits">The number of digits in the adjusted structure.</param>
            <param name="fRound">If this parameter is true, the new Value will be rounded, if false, the value will be truncated.</param>
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value property contains the adjusted number.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Ceiling(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Returns the smallest whole number greater than or equal to the specified OpenAccessDecimal structure.
            </summary>
            <param name="n">The OpenAccessDecimal structure for which the ceiling value is to be calculated.</param>
            <returns>A OpenAccessDecimal representing the smallest whole number greater than or equal to the specified OpenAccessDecimal structure.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.CompareTo(System.Object)">
            <summary>
            Compares this OpenAccessDecimal instance to the supplied System.Object and returns an indication of their relative values.
            </summary>
            <param name="value">The System.Object to be compared.</param>
            <returns>A signed number that indicates the relative values of the instance and the 
            object.  Return Value Condition Less than zero This instance is less than 
            the object. Zero This instance is the same as the object. Greater than zero 
            This instance is greater than the object -or- The object is a null reference 
            (Nothing in Visual Basic)
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.CompareTo(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Compares this OpenAccessDecimal instance to the supplied OpenAccessDecimal object and returns an indication of their relative values.
            </summary>
            <param name="value">The OpenAccessDecimal to be compared.</param>
            <returns>A signed number that indicates the relative values of the instance and the 
            object. Return value Condition Less than zero This instance is less than 
            the object. Zero This instance is the same as the object. Greater than zero 
            This instance is greater than the object -or- The object is a null reference 
            (Nothing in Visual Basic)
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ConvertToPrecScale(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,System.Int32,System.Int32)">
            <summary>
            Adjusts the value of the OpenAccessDecimal operand to the indicated precision and scale.
            </summary>
            <param name="n">The OpenAccessDecimal structure whose value is to be adjusted.</param>
            <param name="precision">The precision for the new OpenAccessDecimal structure.</param>
            <param name="scale">The scale for the new OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose value has been adjusted to the precision and scale indicated in the parameters.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Divide(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The division operator calculates the results of dividing the first OpenAccessDecimal operand by the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value property contains the results of the division.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Equals(System.Object)">
            <summary>
            Compares the supplied System.Object parameter to the OpenAccessDecimal.Value property of the OpenAccessDecimal instance.
            </summary>
            <param name="value">The System.Object to be compared.</param>
            <returns>true if object is an instance of OpenAccessDecimal and the two are equal. Otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Equals(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal operands to determine whether they are equal.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>true if the two values are equal. Otherwise, false. If either instance is null, the value of the OpenAccessDecimal will be null.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Floor(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Rounds a specified OpenAccessDecimal number to the next lower whole number.
            </summary>
            <param name="n">The OpenAccessDecimal structure for which the floor value is to be calculated.</param>
            <returns>A OpenAccessDecimal structure that contains the whole number part of this OpenAccessDecimal structure.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Returns the XML Schema definition language (XSD) of the specified System.Xml.Schema.XmlSchemaSet.
            </summary>
            <param name="schemaSet">A System.Xml.Schema.XmlSchemaSet.</param>
            <returns>A string value that indicates the XSD of the specified System.Xml.Schema.XmlSchemaSet.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.GreaterThan(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of two OpenAccessDecimal structures to determine whether the first is greater than the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than the second instance. Otherwise, System.Data.SqlTypes.SqlBoolean.False. 
            If either instance of OpenAccessDecimal is null, the System.Data.SqlTypes.SqlBoolean.Value 
            of the System.Data.SqlTypes.SqlBoolean will be System.Data.SqlTypes.SqlBoolean.Null.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.GreaterThanOrEqual(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal parameters to determine whether the first is greater than or equal to the second.        
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is greater than or equal to the second instance. Otherwise, 
            System.Data.SqlTypes.SqlBoolean.False. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.LessThan(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of two OpenAccessDecimal structures to determine whether the first is less than the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than the second instance. Otherwise, System.Data.SqlTypes.SqlBoolean.False. 
            If either instance of OpenAccessDecimal is null, the System.Data.SqlTypes.SqlBoolean.Value 
               of the System.Data.SqlTypes.SqlBoolean will be System.Data.SqlTypes.SqlBoolean.Null.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.LessThanOrEqual(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal 
            parameters to determine whether the first is less than or equal to the second.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the first instance is less than or equal to the second instance. Otherwise, 
            System.Data.SqlTypes.SqlBoolean.False. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Multiply(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            The multiplication operator computes the product of the two OpenAccessDecimal parameters.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>A new OpenAccessDecimal structure whose OpenAccessDecimal.Value property contains the product of the multiplication.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.NotEquals(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
            Performs a logical comparison of the two OpenAccessDecimal parameters to determine whether they are not equal.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
            A System.Data.SqlTypes.SqlBoolean that is System.Data.SqlTypes.SqlBoolean.True 
            if the two instances are not equal or System.Data.SqlTypes.SqlBoolean.False 
            if the two instances are equal. If either instance of OpenAccessDecimal 
            is null, the System.Data.SqlTypes.SqlBoolean.Value of the System.Data.SqlTypes.SqlBoolean 
            will be System.Data.SqlTypes.SqlBoolean.Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Parse(System.String)">
            <summary>
            Converts the System.String representation of a number to its OpenAccessDecimal equivalent.
            </summary>
            <param name="s">The String to be parsed.</param>
            <returns>A OpenAccessDecimal equivalent to the value that is contained in the specified System.String.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Power(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,System.Double)">
            <summary>
                Raises the value of the specified OpenAccessDecimal structure
                to the specified exponential power.
            </summary>
            <param name="n">The OpenAccessDecimal structure to be raised to a power.</param>
            <param name="exp">A double value that indicates the power to which the number should be raised.</param>
            <returns>A OpenAccessDecimal structure that contains the results.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Round(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,System.Int32)">
            <summary>
            Gets the number nearest the specified OpenAccessDecimal structure's 
            value with the specified precision.
            </summary>
            <param name="n">The OpenAccessDecimal structure to be rounded.</param>
            <param name="position">The number of significant fractional digits (precision) in the return value.</param>
            <returns>A OpenAccessDecimal structure that contains the results of the rounding operation.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Sign(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
                Gets a value that indicates the sign of a OpenAccessDecimal
                structure's OpenAccessDecimal.Value property.
            </summary>
            <param name="n">The OpenAccessDecimal structure whose sign is to be evaluated.</param>
            <returns>A number that indicates the sign of the OpenAccessDecimal structure.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Subtract(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal)">
            <summary>
                Calculates the results of subtracting the second OpenAccessDecimal
                operand from the first.
            </summary>
            <param name="x">A OpenAccessDecimal structure.</param>
            <param name="y">A OpenAccessDecimal structure.</param>
            <returns>
                A new OpenAccessDecimal structure whose Value property contains
                the results of the subtraction.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToDouble">
            <summary>
                Returns the a double equal to the contents of the OpenAccessDecimal.Value
                property of this instance.
            </summary>
            <returns>The decimal representation of the OpenAccessDecimal.Value property.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlBoolean">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlBoolean.
            </summary>
            <returns>
                true if the OpenAccessDecimal.Value is non-zero; false if zero;
                otherwise Null.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlByte">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlByte.
            </summary>
            <returns>
            A System.Data.SqlTypes.SqlByte structure whose Value equals the Value of
                this OpenAccessDecimal structure. If the OpenAccessDecimal
                structure's Value is true, the System.Data.SqlTypes.SqlByte structure's Value
                will be 1. Otherwise, the System.Data.SqlTypes.SqlByte structure's Value
                will be 0.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlDouble">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlDouble.
            </summary>
            <returns>A System.Data.SqlTypes.SqlDouble structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlInt16">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlInt16.
            </summary>
            <returns>A System.Data.SqlTypes.SqlInt16 structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlInt32">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlInt32.
            </summary>
            <returns>A System.Data.SqlTypes.SqlInt32 structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlInt64">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlInt64.
            </summary>
            <returns>A System.Data.SqlTypes.SqlInt64 structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlMoney">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlMoney.
            </summary>
            <returns>A System.Data.SqlTypes.SqlMoney structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlSingle">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlSingle.
            </summary>
            <returns>
            A System.Data.SqlTypes.SqlSingle structure with the same value as this instance of OpenAccessDecimal.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToSqlString">
            <summary>
            Converts this OpenAccessDecimal structure to System.Data.SqlTypes.SqlString.
            </summary>
            <returns>
            A System.Data.SqlTypes.SqlString structure whose value is a string representing 
            the value contained in this OpenAccessDecimal structure.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.ToString">
            <summary>
            Converts this OpenAccessDecimal structure to System.String.
            </summary>
            <returns>A new System.String object that contains the string representation of the 
            OpenAccessDecimal structure's OpenAccessDecimal.Value property.
            </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Truncate(NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal,System.Int32)">
            <summary>
            Truncates the specified OpenAccessDecimal structure's value to the that you want position.
            </summary>
            <param name="n">The OpenAccessDecimal structure to be truncated.</param>
            <param name="position">The decimal position to which the number will be truncated.</param>
            <returns>Supply a negative value for the position parameter in order to truncate the 
            value to the corresponding position to the left of the decimal point.</returns>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.MaxValue">
            <summary>
               A constant representing the maximum value of a OpenAccessDecimal
               structure.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.MinValue">
            <summary>
            A constant representing the minimum value for a OpenAccessDecimal
             structure.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Null">
            <summary>
            Represents a null value that can be assigned to the OpenAccessDecimal.Value
            property of an instance of the System.Data.SqlTypes.SqlMoney class.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.BinData">
            <summary>
            Returns an array of bytes that contains the binary representation of the OpenAccessDecimal
            structure's value.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Data">
            <summary>
            Returns an array of integers that contains the binary representation of this OpenAccessDecimal
            structure.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.IsNull">
            <summary>
            Returns true if the OpenAccessDecimal.Value is null.Otherwise, false.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.IsPositive">
            <summary>
            Returns if OpenAccessDecimal.Value is positive or not.
            true if the OpenAccessDecimal.Value is assigned to null. Otherwise, false.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Precision">
            <summary>
            Returns the maximum number of digits used to represent the Value of OpenAccessDecimal structure.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Scale">
            <summary>
            Returns the number of decimal places to which OpenAccessDecimal.Value is resolved.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessDecimal.Value">
            <summary>
            Returns the read-only value of OpenAccessDecimal structure 
            A number in the range -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514,162,514,264,337,593,543,950,335.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessDescriptionAttribute.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessEscapeTranslator.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessEscapeTranslator.getTranslationNeeded(System.Int32)">
            <summary>
            Returns The translation Type needed for current escapeType
            </summary>
            <param name="escapeType">Escape type</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessEscapeTranslator.translateCallEscape(DDInt.Common.CommonCallEscape)">
            <summary>
            Return the ADO.NET Stored procedure syntax
            </summary>
            <param name="callEscape">Strored Procedure Info</param>
            <returns>string with procedure syntax</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessEscapeTranslator.translateTimestampEscape(DDInt.Common.CommonTimestampEscape)">
            <summary>
            Convert timestampEscape to String representation
            </summary>
            <param name="timestampEscape">timestap escape object</param>
            <returns>string representation</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessEscapeTranslator.translateFunctionEscape(DDInt.Common.CommonFunctionEscape)">
            <summary>
            Convert the Function Escape to String representation
            </summary>
            <param name="esc">Function Escape object</param>
            <returns>string representation of Function Escape object</returns>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames">
            <summary>
            Provides a list of constants for the well-known MetaDataCollections: DataSourceInformation, DataTypes, MetaDataCollections, ReservedWords, and Restrictions.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Columns">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Columns collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.ForeignKeys">
            <summary>
            A constant for use with the GetSchema method that 
            represents the ForeignKeys collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Indexes">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Indexes collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.PrimaryKeys">
            <summary>
            A constant for use with the GetSchema method that represents the PrimaryKeys collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Procedures">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Procedures collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.ProcedureParameters">
            <summary>
            Returns information about the parameters and return codes of procedures.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Tables">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Tables collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.TablePrivileges">
            <summary>
            Identifies the privileges on tables defined in the catalog 
            that are available to or granted by a given user.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Views">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Views collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Schemata">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Schemata collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.Catalogs">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Catalog collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsTables">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Tables collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsColumns">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Columns collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsIndexes">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Indexes collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsViews">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Views collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsProcedures">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Procedures collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsParameters">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.Parameters collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsUniqueKeys">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.UniqueKeys collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataCollectionNames.VsForeignKeys">
            <summary>
            A constant for use with the GetSchema method that 
            represents the Vs.ForeignKeys collection.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataFactory.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataFactory.IsRowSupportedByCurrentVersion(System.Data.DataTable,System.Data.DataRow,DDInt.Common.CommonSession)">
            <summary>
            If DB2V9Types are supported then allow the DEDCFLOAT and BIGINT rows in the Datatypes Metadata table.
            Otherwise ignore those rows.
            </summary>
            <param name="schemaTable">Result SchemaTable for DataType Metadata call</param>
            <param name="requestedCollectionRow">Row of requested collection</param>
            <param name="commonSession">current SuiteAnalyticsConnect session</param>
            <returns>true to make this row visible in output</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaDataFactory.GetSchemaColumnValue(System.Data.DataColumn,System.Data.DataRow,System.Data.DataTable,DDInt.Common.CommonSession)">
            <summary>
            We need to change the create formats fo BINARY dataTypes of DB2V9 DataTypes are supported.
            Change them form "*CHAR() FOR BIT DATA" to "*BINARY()" of DB2V9 DataTypes are supported.
            </summary>
            <param name="schemaColumn">Current SchemaColumn</param>
            <param name="schemaRow">Current SchemaRow</param>
            <param name="schemaTable">Restult SchemaTable for Metadata call</param>
            <param name="session">Current SuiteAnalyticsConnect session</param>
            <returns>actual Create or Literal format for the targer SchemaRow and column</returns>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMetaType.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessPermissionAttribute">
            <summary>
            The OpenAccessPermissionAttribute object initializes a new instance of 
            the OpenAccessPermissionAttribute class with one of the SecurityAction values.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessPermissionAttribute.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            The SecurityAction property specifies the security actions that can be performed using 
            declarative security.
            </summary>
            <param name="action">One of the System.Security.Permissions.SecurityAction 
            values representing an action that can be performed using declarative security</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessPermissionAttribute.CreatePermission">
            <summary>
            The CreatePermission() method returns an OpenAccessPermission object that is 
            configured according to the attribute properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand">
            <summary>
            Initializes a new instance of the OpenAccessCommand class.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.footprint">
            <summary>
            footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.escapeTranslator">
            <summary>
            This field represents the connection to the DBMS. It is created
            at connect time and passed to this class' constructor. It is
            used by this class to submit application-specified database operations.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.sqlParameterCount">
            <summary>
            Parameter count returned by baseSQL parser
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.IndexOfRetVal">
            <summary>
            Index fo returnValue parameter
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.#ctor">
            <summary>
            Initializes a new instance of the OpenAccessCommand class.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenAccessCommand class and sets         
            the text command used by this instance of the OpenAccessCommand.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessConnection)">
            <summary>
            Initializes a new instance of the OpenAccessCommand class and sets the
            OpenAccessConnection and the text command used by this instance of the OpenAccessCommand.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
            <param name="connection">The OpenAccessConnection object that 
            represents the session to SuiteAnalyticsConnect database.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessConnection,NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction)">
            <summary>
            Initializes a new instance of the OpenAccessCommand class and sets 
            the OpenAccessConnection and the text command and 
            Local Transaction object instance used by this 
            instance of the OpenAccessCommand.
            </summary>
            <param name="commandText">Command Text (SQL)</param>
            <param name="connection">OpenAccessConnection Instance</param>
            <param name="trans">OpenAccessTransaction Instance</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CreateParameter">
            <summary>
            Creates a new instance of an OpenAccessParameter object.
            </summary>
            <returns>An OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.Cancel">
            <summary>
            Attempts to cancel the execution of an 
            IDbCommand.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ExecuteReader(System.Data.CommandBehavior)">
            <overloads>
            Sends the CommandText to the Connection, and builds an OpenAccessDataReader 
            using one of the CommandBehavior values.
            </overloads>
            <returns>An OpenAccessDataReader object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ExecuteReader">
            <overloads>
            Sends the CommandText to the Connection, and builds an OpenAccessDataReader 
            using one of the CommandBehavior values.
            </overloads>
            <returns>An OpenAccessDataReader object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against 
            an OpenAccessConnection object, and returns the number 
            of rows affected. This method is intended for commands that do not return 
            results.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the 
            first row of the resultset that the query returns. Any additional rows 
            or columns are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.Prepare">
            <summary>
            Creates a prepared or compiled version 
            of the command on the data source.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessCommand)">
            <summary>
            Constructor used to clone a object
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.GetLongData(NetSuite.SuiteAnalyticsConnect.ssp.LongVariable,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Data from Long Type columns
            </summary>
            <param name="strVar">Variable Name</param>
            <param name="fieldOffset">Offset in Data</param>
            <param name="buffer">Output Buffer</param>
            <param name="bufferOffset">Offset in buffer to start writing</param>
            <param name="length">Max length to write in buffer</param>
            <param name="read">no of bytes read</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.DeriveParameters">
            <summary>
            Derives Information for Stored Procedure Parameters
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ParseCommand(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Parses the command text sent by the user to change it into the format
            understandable by the SuiteAnalyticsConnect server
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CreateReorderedParameters">
            <summary>
            Reorders the parameters depeinding on the parameter direction and 
            whether it is a parameter marker
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CreateReorderedParameters(System.Boolean)">
            <summary>
            Reorders the parameters depeinding on the parameter direction and 
            whether it is a parameter marker
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.bindParameters(System.String,System.Int32)">
            <summary>
            Initializes parameter list, adjust the number of parameters if necessary,
            sets correct parameter encoding and finally and bind input/output parameters with extended define
            </summary>
            <param name="sql">command text</param>
            <param name="nrParams">no of parameters</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.prepare(System.String,System.Int32)">
            <summary>
            prepare the command on server side
            </summary>
            <param name="sql">commandText</param>
            <param name="nrParams">no of parameters</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CheckConnection">
            <summary>
            Check if the connection is valid.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CheckCommandText">
            <summary>
            Check If commandText is valid.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CheckTransaction">
            <summary>
            Checks if the transaction is valid and properly set
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CheckReaderOpen">
            <summary>
            Check if Reader is already Open on this command Instance
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ArrayBindCount">
            <summary>
            Sets the count of elements for parameter array binding.  Zero implies that array
            binding is not enabled.  The initial default is zero.
            </summary>
            <remarks>
            The application must set this property before executing a command that uses parameter array binding. 
            The count must be equal to the length of the arrays that are set for each parameter.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.ArrayBindStatus">
            <summary>
            Returns an array of row status values.  This property can be
            used to check status after executing a command that used parameter array
            binding.  This property will return null when parameter array binding is
            not used.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CommandText">
            <summary>
            Gets or sets the text command to run
            against the data source.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before
            terminating the attempt to execute a command and 
            generating an error.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.CommandType">
            <summary>
            Indicates or specifies how the CommandText
            property is interpreted.
            </summary>
            <summary>
            Indicates or specifies how the CommandText
            property is interpreted.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.Connection">
            <summary>
            Gets or sets the OpenAccessConnection 
            used by this instance of the OpenAccessCommand.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.RowSetSize">
            <summary>
            Limits the number of rows returned by any query 
            on this Command object to the value specified at execute time. When set
            to 0 (the default), the data provider does not limit the number of rows returned.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.Parameters">
            <summary>
            Gets the OpenAccessParameterCollection.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.Transaction">
            <summary>
            Gets or sets the OpenAccessTransaction 
            within which the OpenAccessCommand executes.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied 
            to the DataRow, when used by the Update method of 
            a DbDataAdapter.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessRowStatus">
            <summary>
            Indicates the status of each row after an array bind operation. 
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessRowStatus.OK">
            <summary>
            The operation succeeded. All entries are marked as OK.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessRowStatus.Failed">
            <summary>
            The operation failed. The data provider assigns 
            this value to all status entries except for the row that caused the failure.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessRowStatus.SchemaViolation">
            <summary>
            When an operation fails, the data provider assigns this value to 
            the row that caused the failure.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraversalVisitor">
            <summary>
            Summary description for BaseSQLTreeTraversalVisitor.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessErrorCode">
            <summary>
            Contains documented SuiteAnalyticsConnect error codes, used by OpenAccessException and 
            OpenAccessInfoMessageEventArgs.
            These error codes can also be received from the server, so in theory any
            value can be expected.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessException">
            <summary>
            Returns the reason code when the 
            SuiteAnalyticsConnect server returns an error.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessException.footprint">
            <summary>
            Footprint Information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="serializationInfo">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessException.SetWarning(System.String,System.String)">
            <summary>
            Create a New Warning Event Args using the current warnning message
            </summary>
            <param name="warningText">Warning Message Text</param>
            <param name="sqlState">SqlState for the current warnning message</param>
            <returns>OpenAccessInfoMessageEvent Argument object</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor that is invoked when the exception is recreated
            using a serialization stream.
            </summary>
            <param name="serializationInfo">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.Message">
            <summary>
            Returns the error message for the exception.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.ErrorCode">
            <summary>
            Gets the HRESULT of the error.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.Number" -->
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.Errors">
            <summary>
            Returns an OpenAccessErrorCollection of one or more
            OpenAccessError objects
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.ErrorPosition">
            <summary>
            Returns the offset in the SQL statement 
            for which the error applies. If the offset is not applicable to the
            error, 0 is returned.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessException.SQLState">
            <summary>
            Returns the SQL state associated with the
            current error condition.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionDescriptor.footprint">
            <summary>
            A Field to store the footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionDescriptorList.footprint">
            <summary>
            Field for footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionOptions.footprint">
            <summary>
            Field for footprint information
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessCounters.footprint">
            <summary>
            Footprint information
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessError">
            <summary>
            Collects information relevant to errors and warnings 
            generated by the SuiteAnalyticsConnect database server.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessError.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessError.ToString">
            <summary>
             Returns the string representation of the error message.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessError.Message">
            <summary>
            Returns the error message text from the SuiteAnalyticsConnect server.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessError.Number">
            <summary>
            Returns the error number from the SuiteAnalyticsConnect server.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessError.ErrorPosition">
            <summary>
            Returns the offset in the SQL statement 
            for which the error applies. If the offset is not applicable to the
            error, 0 is returned. The initial default value is 0.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessError.SQLState">
            <summary>
            Gets the string representation of the SQL State when the SuiteAnalyticsConnect data 
            provider throws an exception. This property is read-only.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessErrorCollection">
            <summary>
            Contains all of the errors generated by the SuiteAnalyticsConnect server.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessErrorCollection.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventArgs">
            <summary>
            Provides data for the InfoMessage event.
            </summary>
            <remarks>
            The OpenAccessInfoMessageEventArgs object is passed as input 
            to the OpenAccessInfoMessageEventHandler. It contains information relevant to
            a warning generated by the SuiteAnalyticsConnect server.
            </remarks>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventArgs.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventArgs.Errors">
             <summary>
            Contains all of the errors generated by the SuiteAnalyticsConnect database server.
             </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventArgs.Message">
            <summary>
            Gets the full text of the message sent from the database.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventArgs.Source">
            <summary>
            Gets the name of the object that generated the error.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessMessage.footprint">
            <summary>
            A field that stored footprint information
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter">
            <summary>
            Represents a parameter to an OpenAccessCommand.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the OpenAccessDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the OpenAccessDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the OpenAccessDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
            <param name="direction">A value that indicates whether the parameter 
            is input-only, output-only, bidirectional, or the return value parameter 
            of a stored procedure.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to use when loading Value.</param>
            <param name="sourceColumnNullMapping">The source column NULL mapping.</param>
            <param name="paramValue">The value of the OpenAccessDbType.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter. 
            The default is an empty string ("").</param>
            <param name="value">Returns the value of the OpenAccessDbType.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter. 
            The default is an empty string ("").</param>
            <param name="type">Returns the type of the OpenAccessDbType.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.ResetDbType">
            <summary>
            Resets the value of DbType to null
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.ResetOpenAccessDbType">
            <summary>
            Resets the value of OpenAccessDbType to null
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.ToString">
            <summary>
            Returns the parameter name as a string representation of the parameter.
            </summary>
            <returns>The parameter name as a string 
            representation of the ParameterName. </returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.WriteDefinitionOn(NetSuite.SuiteAnalyticsConnect.ssp.SspWriter)">
            Variable implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Creates a copy of given OpenAccessParameter
            </summary>
            <param name="toCopy">Source OpenAccessParameter Object</param>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.OpenAccessDbType">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.ArrayBindStatus">
            <summary>
            Determines whether any values in the array of OpenAccessParameterStatus entries should be bound as NULL. 
            The OpenAccessParameterStatus enumeration contains the entry 
            NullValue. When this property is not set, then no values are 
            NULL. The length of the array should match the amount 
            specified by the OpenAccessCommand object's ArrayBindCount 
            property. The initial default value is null.
            </summary>
            <remarks>
            To support arguments of type PL/SQL Table, the SuiteAnalyticsConnect data provider 
            populates the array when the parameter is being used to 
            retrieve an array of output values.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.Precision">
            <summary>
            Gets or sets the maximum number of 
            digits used to represent the Value property.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.Scale">
            <summary>
            Gets or sets the number of decimal places 
            to which Value is resolved.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.Direction">
            <summary>
            Gets or Sets the Direction of the Parameter.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.IsNullable">
            <summary>
            Gets or Sets If the parameter is Nullable.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.ParameterName">
            <summary>
            Get or Set the name of the Parameter object.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            When the CollectionType is set to PLSQLAssociativeArray, the Size
            property refers to the maximum number of anticipated elements.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapped to the 
            DataSet; also used for loading or returning the Value.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates 
            whether the source column is nullable. 
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.SourceVersion">
            <summary>
            Gets or sets the DataRowVersion to 
            use when loading Value.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.Value">
            <summary>
            Get or Set value of the Paremeter object.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.DbType">
            <summary>
            Get or Set the DbType of OpenAccessParameter
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameter.sspType">
            <summary>
            Gets or sets the <see cref="T:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType">OpenAccessDbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:NetSuite.SuiteAnalyticsConnect.OpenAccessDbType">OpenAccessDbType</see> values.</value>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterStatus">
            <summary>
            Indicates parameter value status when using array binding. 
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterStatus.OK">
            <summary>The operation succeeded. All entries are marked as OK.</summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterStatus.Null">
            <summary>
            The operation failed. The data provider assigns this value to all entries except
            for the row that caused the failure. The exception thrown for the failed operation
            reflects the error for the first row to fail.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection">
            <summary>
            Collects the parameters that are relevant to an OpenAccessCommand. The class also represents the mapping of the 
            parameters to the columns in a DataSet.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.footprint">
            <summary>
            Footprint Information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.Object)">
            <summary>
            Add a Parameter Object to the collection.
            </summary>
            <param name="value">OpenAccessParameter Object</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Add a Parameter Object to the collection.
            </summary>
            <param name="value">OpenAccessParameter Object</param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified OpenAccessParameter to the 
            OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The OpenAccessParameter to add to the collection.</param>
            <returns>The new OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType)">
            <summary>
            Adds the specified OpenAccessParameter to the 
            OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="type">The SuiteAnalyticsConnect data type of the parameter.</param>
            <returns>The new OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32)">
            <summary>
            Adds the specified OpenAccessParameter to the 
            OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the OpenAccessDbType values.</param>
            <param name="size">The width of the column.</param>
            <returns>The new OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32,System.String)">
            <summary>
            Adds the specified OpenAccessParameter to the 
            OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the OpenAccessType values.</param>
            <param name="size">The width of the column.</param>
            <param name="sourceColumn">Gets or sets the name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <returns>The new OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Add(System.String,NetSuite.SuiteAnalyticsConnect.OpenAccessDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds the specified OpenAccessParameter to the 
            OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the OpenAccessType values.</param>
            <param name="size">The width of the column.</param>
            <param name="direction">Gets or sets a value that indicates 
            whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.</param>
            <param name="isNullable">Gets or sets a value that indicates 
            whether the parameteraccepts null values.</param>
            <param name="precision">Gets or sets the maximum number of 
            digits used to represent the Value property.</param>
            <param name="scale">Gets or sets the number of decimal places 
            to which Value is resolved.</param>
            <param name="sourceColumn">Gets or sets the name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">Gets or sets the DataRowVersion to 
            use when loading Value.</param>
            <param name="paramValue"></param>
            <returns>The new OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of values to the end of the OpenAccessParameterCollection.
            </summary>
            <param name="values">The Array values to add.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.AddRange(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[])">
            <summary>
            Adds elements to the end of the OpenAccessParameterCollection.
            </summary>
            <param name="values">The OpenAccessParameter values to be added.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a value to the end of the OpenAccessParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
            <returns>An OpenAccessParameter object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value that indicates whether an 
            OpenAccessParameter object exists in the collection.
            </summary>
            <param name="param">The OpenAccessParameter 
            object to find.</param>
            <returns>true if the collection contains the OpenAccessParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Contains(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Gets a value that indicates whether an 
            OpenAccessParameter object exists in the collection.
            </summary>
            <param name="param">The OpenAccessParameter 
            object to find.</param>
            <returns>true if the collection contains the OpenAccessParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Contains(System.String)">
            <summary>
            Gets a value that indicates whether a 
            OpenAccessParameter object exists in the collection.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter 
            object to find.</param>
            <returns>true if the collection contains the OpenAccessParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies OpenAccessParameter objects from 
            the OpenAccessParameterCollection to a specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from the current Array.</param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.CopyTo(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[],System.Int32)">
            <summary>
            Copies OpenAccessParameter objects from the OpenAccessParameterCollection to a specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the current Array. </param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.GetEnumerator">
            <summary>
            Returns the IEnumerator interface for a given array.
            </summary>
            <returns>The IEnumerator interface for an array.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the OpenAccessParameter 
            object within the collection.
            </summary>
            <param name="parameterName">The zero-based location of the OpenAccessParameter in the collection.</param>
            <returns>The zero-based location of the OpenAccessParameter in the collection.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IndexOf(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Gets the location of the OpenAccessParameter object within the collection.
            </summary>
            <param name="value">The OpenAccessParameter object to find.</param>
            <returns>The zero-based location of the OpenAccessParameter in the collection.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IndexOfRetVal">
            <summary>
            Gets the location of the OpenAccessParameter 
            object with the ReturnValue Direction property.
            </summary>
            <returns>The zero-based location of the ReturnValue in the collection.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an OpenAccessParameter object into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="value">The OpenAccessParameter to add to the collection.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Insert(System.Int32,NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Inserts a OpenAccessParameter object into the collection
            at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is 
            to be inserted within the collection.</param>
            <param name="param">The OpenAccessParameter to add to the collection.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Remove(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter)">
            <summary>
            Removes the specified OpenAccessParameter from 
            the collection.
            </summary>
            <param name="value">The OpenAccessParameter object to remove from the collection.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified OpenAccessParameter from 
            the collection.
            </summary>
            <param name="value">The OpenAccessParameter object to remove from the collection.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the OpenAccessParameter object from the collection.
            </summary>
            <param name="parameterName">The name of the OpenAccessParameter to remove.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the OpenAccessParameter object from the collection.
            </summary>
            <param name="index">The zero-based index of the OpenAccessParameter object to remove.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.writeInputVariables(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[],NetSuite.SuiteAnalyticsConnect.ssp.SspWriter,System.Int32)">
            VariableList implementation. See VariableList.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.CountNormalVariables(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[])">
            VariableList implementation. See VariableList.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.DefineNormalVariables(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[],NetSuite.SuiteAnalyticsConnect.ssp.SspWriter)">
            VariableList implementation. See VariableList.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.ReadOutputVariables(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[],NetSuite.SuiteAnalyticsConnect.ssp.SspReader)">
            VariableList implementation. See VariableList.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.HasNormalVariables(NetSuite.SuiteAnalyticsConnect.OpenAccessParameter[])">
            VariableList implementation. See VariableList.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.GetVariableList(System.Int32)">
            Returns VariableList implementation that can be used by SSP.
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Count">
            <summary>
            Gets the number of OpenAccessParameter objects in the collection.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether the OpenAccessParameterCollection has a fixed size.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the OpenAccessParameterCollection is read-only.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether the OpenAccessParameterCollection is thread-safe.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.Item(System.Int32)">
            <summary>
            Initializes a new 
            instance of the OpenAccessParameter class.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessParameterCollection.SyncRoot">
            <summary>
            Gets the object used to synchronize access to the OpenAccessParameterCollection.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessPermission">
            <summary>
            The OpenAccessPermission class enables the SuiteAnalyticsConnect data provider 
            to ensure that a user has a security level sufficient to access an SuiteAnalyticsConnect Server. 
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessPermission.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessPermission.#ctor">
            <summary>
            The OpenAccessPermission class enables the NetSuite SuiteAnalyticsConnect .NET Provider 
            to ensure that a user has a security level sufficient to access a SuiteAnalyticsConnect Driver.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            The OpenAccessPermission class enables the NetSuite SuiteAnalyticsConnect .NET Provider 
            to ensure that a user has a security level sufficient to access SuiteAnalyticsConnect backends
            </summary>
            <param name="state">One of the System.Security.Permissions.PermissionState values.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessPermission.Copy">
            <summary>
            Returns the OpenAccessPermission as an IPermission.
            </summary>
            <returns>A copy of the current permission object.</returns>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.ProviderAttributes">
            Loaded from initialization file. Can not be overridden
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessProperties">
            Implments retrieval of provider default properties.
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessProperties.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionOptions,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.Reconnect">
            <summary>
            Method used to reconnect to the server after we loose the session 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.FireSessionEvent(NetSuite.SuiteAnalyticsConnect.OpenAccessSession.OpenAccessSessionEvent)">
            <summary>
            
            </summary>
            <param name="sessionEvent"></param>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.FirstServer">
            <summary>
            Get first server from list of alternate servers
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.RandomServer">
            <summary>
            Get first server from list of alternate servers
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.Transaction">
            <summary>
            gets and sets the trasaction of current session
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessSession.OpenAccessSessionEvent">
            <summary>
            Enum to Specify the Type of OpenAccessSessionEvent Occured
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessInfoMessageEventHandler">
            <summary>
            Passes as an input to the 
            OpenAccessInfoMessageEventHandler and contains information relevant to a warning
            generated by the server.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection">
            <summary>
            Represents an open connection to server.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.footprint">
            <summary>
            fottprint Information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.#ctor">
            <summary>
            Initializes a new instance of OpenAccessConnection.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of OpenAccessConnection.
            </summary>
            <param name="connectionString">The SuiteAnalyticsConnect connection string that includes settings, such as the server name, needed to establish the initial connection. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.#ctor(NetSuite.SuiteAnalyticsConnect.OpenAccessConnection)">
            <summary>
            Used to clone connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.BeginTransaction">
            <summary>
            Begins a transaction at the SuiteAnalyticsConnect server.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction at the SuiteAnalyticsConnect with the specified 
            IsolationLevel.
            </summary>
            <param name="level">The transaction isolation level for this connection.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.GetSchema">
            <summary>
            Returns schema information for the data source of this OpenAccessConnection.
            </summary>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this OpenAccessConnection using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this OpenAccessConnection using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">The restrictions that apply to this schema. </param>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ChangeDatabase(System.String)">
            <summary>
            Chnage the Database the provider is connected to.
            </summary>
            <param name="databaseName">Name of the database to connect to.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.CreateCommand">
            <summary>
            Creates and returns an 
            OpenAccessCommand object associated with 
            the OpenAccessConnection.
            </summary>
            <returns>An OpenAccessCommand object.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Open">
            <summary>
            Opens a database connection with the settings 
            specified by the ConnectionString property of the 
            OpenAccessConnection object.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ClearAllPools">
            <summary>
            Empties the connection pool.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ClearPool(NetSuite.SuiteAnalyticsConnect.OpenAccessConnection)">
            <summary>
            Empties the connection pool associated with the specified connection.
            </summary>
            <param name="connection">The OpenAccessConnection to be cleared from the pool.</param>
            <remarks>The ClearPool method clears the connection pool that is associated with connection. 
            If additional connections associated with the connection pool
            are in use at the time of the call, 
            they are discarded when Close is called on them.</remarks>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.CheckCommunicationLink(NetSuite.SuiteAnalyticsConnect.OpenAccessException)">
            <summary>
            Inspect the exception to check if we have lost our connection to the server is still valid.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.CheckCommunicationLinkWithRetry(NetSuite.SuiteAnalyticsConnect.OpenAccessException)">
            <summary>
            Checks communication Link
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Dispose(System.Boolean)">
            <summary>
            Dispose the OpenAccessConnection Object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            used to notify the beginning of a transactions
            </summary>
            <param name="isolationLevel"></param>
            <returns>DbTransaction object</returns>
        </member>
        <member name="E:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.InfoMessage">
            <summary>
            Occurs when SuiteAnalyticsConnect Server returns a warning or informational message.
            </summary>
            <remarks>
            Receives an argument of type OpenAccessInfoMessageEventArgs
            containing data relevant to this event. Clients that want to process 
            warnings and informational messages sent by the database server should
            create a OpenAccessInfoMessageEventHandler delegate to listen to this event.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open a database.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.DataSource">
            <summary>
            Gets the name of the DataSource to which to connect.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ServerDataSource">
            <summary>
            Gets the name of the Server DataSource to which to connect.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ApplicationID">
            <summary>
            Specifies the application ID that identifies the client application to the SequeLink 
            service. This attribute is only required when the SequeLink service you are connecting 
            to has been configured to limit access to specific applications.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection, before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Host">
            <summary>
            Returns the value specified for the Host 
            connection string option, or the value specified 
            in the tnsnames.ora file, if it was used during connection. Read only.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Port">
            <summary>
            Returns the value specified for the 
            Port connection string option. Read only.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.ServerVersion">
            <summary>
            Returns a string containing the version of the 
            SuiteAnalyticsConnect server to which the client is connected.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnection.SessionId">
            <summary>
            Internal property defined for QA connection pool testing.
            </summary>
            <exclude/>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory">
            <summary>
            Represents a set of methods for creating instances of 
            the SuiteAnalyticsConnect ADO.NET data provider's implementation of the data source classes.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.footprint">
            <summary>
            Fooprint information field
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.Instance">
            <summary>
            This instance is maintained so that get DbProviderFactories.GetFactories() 
            of the .NET can use this instance when using the .NET factory approach
            along with this enteries need to be made in the machine.config file.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateCommand">
            <summary>
            Returns a new instance of the provider's class that implements the 
            System.Data.Common.DbCommand class
            </summary>
            <returns>A new instance of System.Data.Common.DbCommand.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateConnection">
            <summary>
            Returns a new instance of the provider's class that implements the 
            System.Data.Common.DbConnection class.
            </summary>
            <returns>A new instance of System.Data.Common.DbConnection.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateCommandBuilder">
            <summary>
            Returns a strongly typed DBCommandBuilder instance.
            </summary>
            <returns>A new strongly typed instance of DbCommandBuilder.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateDataAdapter">
            <summary>
            Returns a new instance of the provider's class that implements the 
            System.Data.Common.DbDataAdapter class
            </summary>
            <returns>A new instance of System.Data.Common.DbDataAdapter.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateConnectionStringBuilder">
            <summary>
            A new strongly typed instance of DbConnectionStringBuilder.
            </summary>
            <returns>A new strongly typed instance of DbConnectionStringBuilder.</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessFactory.CreateParameter">
            <summary>
            Returns a new instance of the provider's class that implements the 
            System.Data.Common.DbParameter class
            </summary>
            <returns>A new instance of System.Data.Common.DbParameter.</returns>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessSessionFactory.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessArgumentType">
            <summary>
            SuiteAnalyticsConnect Argument Type Enum
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessArgument">
            <summary>
            Class contains Detailsed Information of SuiteAnalyticsConnect Argument
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessStoredProcedureInfo">
            <summary>
            Stored Procedure Information Class
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessStoredProcedureInfo.footprint">
            <summary>
            Footprint information
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessStoredProcedureInfo.ParameterCount">
            <summary>
            Total Number of USER_PARAMETER Type arguments in the current 
            Stored Procedure Info Text
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessStoredProcedureInfo.FullProcedureName">
            <summary>
            Get complete Procedure Name from the set of Identifiers
            </summary>
        </member>
        <member name="T:NetSuite.SequeLink.SequeLinkStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.BAD_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Specified data type is not a member of the OpenAccessDbType enumeration..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.BAD_ISOLATION_LEVEL">
            <summary>
              Looks up a localized string similar to Cannot set unsupported isolation level.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.BAD_PARAMETER_DIRECTION">
            <summary>
              Looks up a localized string similar to The direction specified for one of the parameters does not match the stored procedure..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.CANNOT_USE_OUT_PARMS_WITH_ARRAY_BIND">
            <summary>
              Looks up a localized string similar to Array bind feature is only supported with input parameters..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.CANT_CONVERT">
            <summary>
              Looks up a localized string similar to Value can not be converted to requested type..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.COMMAND_TEXT_NOT_SP">
            <summary>
              Looks up a localized string similar to Specified command text is not a stored procedure..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.COMMAND_TYPE_NOT_SP">
            <summary>
              Looks up a localized string similar to Specified command type is not a stored procedure..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.COMMUNICATION_LINK_FAILURE">
            <summary>
              Looks up a localized string similar to Communication link failure.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.DATA_TYPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to This column&apos;s data type is not currently supported..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_ApplicationID">
            <summary>
              Looks up a localized string similar to Application IDs are alphanumeric strings passed by a SuiteAnalyticsConnect Client that identify the client application to a SuiteAnalyticsConnect service that has been configured to accept connections only from specific application IDs..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_BlockFetchForUpdate">
            <summary>
              Looks up a localized string similar to Specifies a workaround connection attribute. When the isolation level is Read committed and a SELECT FOR UPDATE statement is issued against some data stores, the ODBC Client does not lock the expected row..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_CertificateStoreLocation">
            <summary>
              Looks up a localized string similar to Specifies the location of the X.509 certificate store used for client authentication..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_CryptoProtocolVersion">
            <summary>
              Looks up a localized string similar to Specifies the SSL Protocol Version to which you want to connect..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_CustomProperties">
            <summary>
              Looks up a localized string similar to Passes custom connection properties defined in the DataSourceIPCustomProperties service attribute directly to the IP layer..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_Database">
            <summary>
              Looks up a localized string similar to Specifies the name of the database to which you want to connect..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_DBPassword">
            <summary>
              Looks up a localized string similar to Specifies the database password where the connection is connected to..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_DBUser">
            <summary>
              Looks up a localized string similar to Sepcifies the database user name where the connection is connected to..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_EncryptedData">
            <summary>
              Looks up a localized string similar to Indicates whether the data communication will be SSL encrypted or not. Set true for SSL Data Communication, false for Logon Only SSL Connections..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_EncryptionMethod">
            <summary>
              Looks up a localized string similar to Defines the hows the provider encrypts data between the provider and the data source..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_Host">
            <summary>
              Looks up a localized string similar to Either the name or the IP address of the server to which you want to connect..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_HostPassword">
            <summary>
              Looks up a localized string similar to Specifies the host machine password where the connection is connected to..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_HostUser">
            <summary>
              Looks up a localized string similar to Specifies the host machine user name where the connection is connected to..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_NewPassword">
            <summary>
              Looks up a localized string similar to Specifies the new password to be used by the SuiteAnalyticsConnect password change mechanism..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_Password">
            <summary>
              Looks up a localized string similar to Specifies the host or data store password, which may be required depending on the server configuration..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_Port">
            <summary>
              Looks up a localized string similar to The TCP port of the SuiteAnalyticsConnect server running on the backend..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_ServerDataSource">
            <summary>
              Looks up a localized string similar to Specifies a string that identifies the server data source to be used for the connection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.Description_UserID">
            <summary>
              Looks up a localized string similar to Specifies the host or data store user name, which may be required depending on the server configuration. ..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.ENCRYPTION_METHOD_MISMATCH">
            <summary>
              Looks up a localized string similar to Client Service SSL Enable setting do not match with the server setting &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2201">
            <summary>
              Looks up a localized string similar to Network problem, remote timeout during session setup, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2203">
            <summary>
              Looks up a localized string similar to Network resource problem, session aborted due to remote buffer allocation failure, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2205">
            <summary>
              Looks up a localized string similar to Internal network error, session aborted due to remote session protocol error, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2206">
            <summary>
              Looks up a localized string similar to Network problem, cancel not allowed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2207">
            <summary>
              Looks up a localized string similar to Internal network error, session aborted due to session protocol data unit format error, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2208">
            <summary>
              Looks up a localized string similar to Internal network error, session aborted, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2211">
            <summary>
              Looks up a localized string similar to Network problem, cancel not possible because session is killed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2213">
            <summary>
              Looks up a localized string similar to Internal network error, connection closed because session key not found in remote session list..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2215">
            <summary>
              Looks up a localized string similar to Network problem, cancel failed because all transport channels in use on remote session..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2217">
            <summary>
              Looks up a localized string similar to Network problem, session aborted due to internal error in remote procedure call, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2219">
            <summary>
              Looks up a localized string similar to Network problem, invalid IIOP object key, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2221">
            <summary>
              Looks up a localized string similar to Network problem, invalid IIOP operation target, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2223">
            <summary>
              Looks up a localized string similar to Internal network error, session aborted due to remote procedure call failure, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2250">
            <summary>
              Looks up a localized string similar to Network problem, session aborted due to service provider session abort, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2251">
            <summary>
              Looks up a localized string similar to Connection closed due to session kill..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2252">
            <summary>
              Looks up a localized string similar to Connection closed due to service shutdown..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2253">
            <summary>
              Looks up a localized string similar to Connection closed, non SuiteAnalyticsConnect IIOP user exception received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2254">
            <summary>
              Looks up a localized string similar to Connection closed, non SuiteAnalyticsConnect IIOP system exception received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2255">
            <summary>
              Looks up a localized string similar to Connection closed, non SuiteAnalyticsConnect IIOP message format error received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2299">
            <summary>
              Looks up a localized string similar to Connection closed due to service session abort..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2400">
            <summary>
              Looks up a localized string similar to Session refused, session load limit reached on server, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2402">
            <summary>
              Looks up a localized string similar to Session refused, service is shutting down, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2403">
            <summary>
              Looks up a localized string similar to Network resource problem, session refused, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2404">
            <summary>
              Looks up a localized string similar to Session refused by service, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2405">
            <summary>
              Looks up a localized string similar to Network resource problem, session refused, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_2406">
            <summary>
              Looks up a localized string similar to Session refused, service process could not be spawned, connection closed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9501">
            <summary>
              Looks up a localized string similar to Handshake failure: You are trying to connect to a server that is not a SuiteAnalyticsConnect Server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9502">
            <summary>
              Looks up a localized string similar to Handshake failure: A protocol error occurred during the connection setup..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9503">
            <summary>
              Looks up a localized string similar to Handshake failure: You are trying to connect to a server running an incompatible version of SuiteAnalyticsConnect Server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9509">
            <summary>
              Looks up a localized string similar to Server asked for unknown encryption..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9510">
            <summary>
              Looks up a localized string similar to No initialization vector was sent when one was expected..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9511">
            <summary>
              Looks up a localized string similar to Initialization vector has wrong size ({0} bytes). Expected {1} bytes..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9521">
            <summary>
              Looks up a localized string similar to Unsupported authentication mechanism..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9522">
            <summary>
              Looks up a localized string similar to Invalid OEM id..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9523">
            <summary>
              Looks up a localized string similar to Graphic data is not supported by this version of the SuiteAnalyticsConnect for .NET provider..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9528">
            <summary>
              Looks up a localized string similar to Transactions are not supported for this connection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9529">
            <summary>
              Looks up a localized string similar to Transaction isolation level is not supported for this connection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9530">
            <summary>
              Looks up a localized string similar to Cancel is not supported for this connection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9532">
            <summary>
              Looks up a localized string similar to Encryption algorithm not supported in this version..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9534">
            <summary>
              Looks up a localized string similar to DeriveParameters is not supported for this server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9535">
            <summary>
              Looks up a localized string similar to Connection timed out..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9536">
            <summary>
              Looks up a localized string similar to Command canceled..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9537">
            <summary>
              Looks up a localized string similar to Invalid value for OpenAccessDbType..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9538">
            <summary>
              Looks up a localized string similar to Invalid value for DbType..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9539">
            <summary>
              Looks up a localized string similar to DeriveParamaters is only supported for stored procedures..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9540">
            <summary>
              Looks up a localized string similar to Dynamic SQL generation is not supported for this SelectCommand..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9541">
            <summary>
              Looks up a localized string similar to Dynamic SQL generation is not supported against a SelectCommand that generates multiple result sets..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9542">
            <summary>
              Looks up a localized string similar to XA-Open failed with return code {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9543">
            <summary>
              Looks up a localized string similar to XA-Close failed with return code {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9544">
            <summary>
              Looks up a localized string similar to XA call failed ({0})..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9545">
             <summary>
               Looks up a localized string similar to LONG or LOB data types are not supported when array binding parameter values.
            .
             </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9546">
             <summary>
               Looks up a localized string similar to Command timed out.
            .
             </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9621">
            <summary>
              Looks up a localized string similar to IIOP error, invalid reply status received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9622">
            <summary>
              Looks up a localized string similar to IIOP error, invalid fragment type received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9623">
            <summary>
              Looks up a localized string similar to IIOP error, packet fragmentation not allowed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9624">
            <summary>
              Looks up a localized string similar to IIOP error, invalid message type..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9625">
            <summary>
              Looks up a localized string similar to IIOP error, invalid request identifier..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9626">
            <summary>
              Looks up a localized string similar to IIOP error, message length error..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9627">
            <summary>
              Looks up a localized string similar to IIOP error, data length error..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9628">
            <summary>
              Looks up a localized string similar to IIOP error, invalid version..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9629">
            <summary>
              Looks up a localized string similar to IIOP error, invalid protocol identifier..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9630">
            <summary>
              Looks up a localized string similar to IIOP error, invalid service context..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9631">
            <summary>
              Looks up a localized string similar to IIOP error, IOException during packet formatting..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9632">
            <summary>
              Looks up a localized string similar to IIOP error, invalid byte order..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9633">
            <summary>
              Looks up a localized string similar to IIOP error, invalid object key..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9634">
            <summary>
              Looks up a localized string similar to IIOP error, invalid operation..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9635">
            <summary>
              Looks up a localized string similar to IIOP error, system exception received, &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9636">
            <summary>
              Looks up a localized string similar to IIOP error, invalid principal..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9637">
            <summary>
              Looks up a localized string similar to IIOP error, invalid reply expected flag..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9638">
            <summary>
              Looks up a localized string similar to IIOP error, unsupported encoding exception..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9671">
            <summary>
              Looks up a localized string similar to Spdu error, invalid spdu type..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9672">
            <summary>
              Looks up a localized string similar to Spdu error, selector length invalid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9673">
            <summary>
              Looks up a localized string similar to Spdu error, invalid SPDU token..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9674">
            <summary>
              Looks up a localized string similar to Spdu error, unknown tag..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9675">
            <summary>
              Looks up a localized string similar to Spdu error, tag length invalid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9676">
            <summary>
              Looks up a localized string similar to Spdu error, user data length invalid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9677">
            <summary>
              Looks up a localized string similar to Spdu error, invalid version..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9678">
            <summary>
              Looks up a localized string similar to Spdu error, IOException during packet formatting..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9733">
            <summary>
              Looks up a localized string similar to An invalid protocol, &quot;{0}&quot;, has been specified..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9734">
            <summary>
              Looks up a localized string similar to The protocol &quot;{0}&quot; is not installed correctly..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9821">
            <summary>
              Looks up a localized string similar to Transport endpoint state error..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9822">
            <summary>
              Looks up a localized string similar to Transport endpoint error, invalid port specified..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9823">
            <summary>
              Looks up a localized string similar to Transport endpoint error, invalid offset for receive operation..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9824">
            <summary>
              Looks up a localized string similar to Transport endpoint error, invalid length for receive operation..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9825">
            <summary>
              Looks up a localized string similar to Transport endpoint error, buffer not large enough to store data for receive operation..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9826">
            <summary>
              Looks up a localized string similar to Transport endpoint error, network read operation failed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9827">
            <summary>
              Looks up a localized string similar to Transport endpoint error, network send operation failed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9828">
            <summary>
              Looks up a localized string similar to Transport endpoint error, network poll operation failed..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9871">
            <summary>
              Looks up a localized string similar to Session aborted due to network problems..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9872">
            <summary>
              Looks up a localized string similar to Session aborted due to IIOP problems..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9873">
            <summary>
              Looks up a localized string similar to Session aborted due to spdu problems..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9874">
            <summary>
              Looks up a localized string similar to Session aborted due to buffer manager problems..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9875">
            <summary>
              Looks up a localized string similar to Session aborted due to IOException..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9876">
            <summary>
              Looks up a localized string similar to Session refused..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9877">
            <summary>
              Looks up a localized string similar to Session user abort received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9878">
            <summary>
              Looks up a localized string similar to Session provider abort received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9879">
            <summary>
              Looks up a localized string similar to Session exception report received..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9880">
            <summary>
              Looks up a localized string similar to Session protocol state error..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9881">
            <summary>
              Looks up a localized string similar to Session aborted, IIOP user exception received from non SuiteAnalyticsConnect server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9882">
            <summary>
              Looks up a localized string similar to Session aborted, IIOP system exception received from non SuiteAnalyticsConnect server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9883">
            <summary>
              Looks up a localized string similar to Session aborted, IIOP message format error received from non SuiteAnalyticsConnect server..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9884">
            <summary>
              Looks up a localized string similar to Buffer allocation failure..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9930">
            <summary>
              Looks up a localized string similar to Failed to load authentication provider class..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9931">
            <summary>
              Looks up a localized string similar to Authentication provider &quot;{0}&quot; has wrong type..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9932">
            <summary>
              Looks up a localized string similar to No authentication provider specified or found..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9933">
            <summary>
              Looks up a localized string similar to An unsupported mechanism was requested..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9934">
            <summary>
              Looks up a localized string similar to An invalid name was supplied..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9935">
            <summary>
              Looks up a localized string similar to A supplied name was of an unsupported type..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9936">
            <summary>
              Looks up a localized string similar to Incorrect channel bindings were supplied..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9937">
            <summary>
              Looks up a localized string similar to An invalid status code was supplied..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9938">
            <summary>
              Looks up a localized string similar to A token had an invalid MIC..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9939">
            <summary>
              Looks up a localized string similar to No credentials were supplied, or the credentials were unavailable or inaccessible..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9940">
            <summary>
              Looks up a localized string similar to Invalid context has been supplied..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9941">
            <summary>
              Looks up a localized string similar to A supplied token was invalid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9942">
            <summary>
              Looks up a localized string similar to A supplied credential was invalid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9943">
            <summary>
              Looks up a localized string similar to The referenced credentials have expired..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9944">
            <summary>
              Looks up a localized string similar to The context has expired..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9945">
            <summary>
              Looks up a localized string similar to Miscellaneous failure, unspecified at the MGSS level..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9946">
            <summary>
              Looks up a localized string similar to The quality-of-protection requested could not be provided..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9947">
            <summary>
              Looks up a localized string similar to The operation is forbidden by local security policy..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9948">
            <summary>
              Looks up a localized string similar to The operation or option is unavailable..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9949">
            <summary>
              Looks up a localized string similar to The requested credential element already exists..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9950">
            <summary>
              Looks up a localized string similar to The provided name was not a mechanism name..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9951">
            <summary>
              Looks up a localized string similar to Failed to create authentication provider instance..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9952">
            <summary>
              Looks up a localized string similar to Server side authentication is not supported by the authentication library..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9953">
            <summary>
              Looks up a localized string similar to Authentication failed: {0}.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9954">
            <summary>
              Looks up a localized string similar to Error acquiring SSPI credentials: {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9955">
            <summary>
              Looks up a localized string similar to Error completing SSPI token: {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9956">
            <summary>
              Looks up a localized string similar to Error initializing SSPI context: {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_9957">
            <summary>
              Looks up a localized string similar to Error querying security package info: {0}..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_default">
            <summary>
              Looks up a localized string similar to Internal error..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.err_msg_default_1">
            <summary>
              Looks up a localized string similar to Internal error: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.GENERIC">
            <summary>
              Looks up a localized string similar to Error Number -{0}. Unknown error.  Consult documentation.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.PARAMETER_COUNT_MISMATCH">
            <summary>
              Looks up a localized string similar to The number of parameter markers in the command does not match the number of parameters in the parameter collection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.PARAMETER_MISSING">
            <summary>
              Looks up a localized string similar to A parameter exists in the CommandText for which there is no matching parameter in the Parameters collection..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.PROCEDURE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Stored procedure was not found..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.SOURCE_NAME">
            <summary>
              Looks up a localized string similar to NetSuite SuiteAnalyticsConnect ADO.NET Data .
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.SP_PARAMETER_COUNT_MISMATCH">
            <summary>
              Looks up a localized string similar to The specified stored procedure requires more parameters than the user has specified..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UID_AND_PWD_REQUIRED">
            <summary>
              Looks up a localized string similar to The User ID and Password both must be specified in the connection string for the effective Authentication Method..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNABLE_TO_PARSE_TNSNAMES_FILE">
            <summary>
              Looks up a localized string similar to Unable to parse the TNSNAMES.ORA file..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_AUTHENTICATION_METHOD">
            <summary>
              Looks up a localized string similar to The value specified for the authentication method was not recognized..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_BATCH_UPDATE_BEHAVIOR">
            <summary>
              Looks up a localized string similar to The value specified for the batch update behavior was not recognized..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_CERTIFICATE_STORE_LOCATION">
            <summary>
              Looks up a localized string similar to The value specified for the certificate store location was not recognized..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_COMMIT_BEHAVIOR">
            <summary>
              Looks up a localized string similar to Unsupported Commit Behavior. Uses are restricted to ServerDefault, WaitImmediate, WaitBatch, NoWaitImmediate and NoWaitBatch..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_CRYPTO_PROTOCOL_VERSION">
            <summary>
              Looks up a localized string similar to The value specified for the crypto protocol version is not supported..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_ENCRYPTION_METHOD">
            <summary>
              Looks up a localized string similar to The value specified for the encryption method was not recognized..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_PRECISION_VALUE">
            <summary>
              Looks up a localized string similar to Invalid precision value for parameter of type &quot;TIME&quot;. Supported value is 8..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_SCALE_VALUE">
            <summary>
              Looks up a localized string similar to Invalid scale value for parameter of type &quot;TIME&quot;. Supported value is 0..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_SERVICE_SSL_ENABLE">
            <summary>
              Looks up a localized string similar to The value specified for the service ssl enable is not valid..
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.UNSUPPORTED_USER_ID_PRIVILEGE">
            <summary>
              Looks up a localized string similar to User ID Privilege must be set to either SYSDBA or SYSOPER.
            </summary>
        </member>
        <member name="P:NetSuite.SequeLink.SequeLinkStrings.USER_CANCELED_OPERATION">
            <summary>
              Looks up a localized string similar to ORA-01013: user requested cancel of current operation.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessTrace">
            <summary>Provides a set of methods and properties that help you to trace the execution of your code. 
            The data provider can trace all of its method calls and the returns from
            those method calls to a trace file specified by the user.
            </summary>
            <remarks>
            Setting EnableTrace starts the tracing process. Therefore, you must define
            the property values for the trace file before setting EnableTrace. Once the trace
            processing starts, the values of TraceFile and RecreateTrace cannot be
            changed.
            </remarks>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessTrace.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessTrace.EnableTrace">
            <summary>
            Enables tracing. By default, tracing is not enabled.
            </summary>
            <remarks>
            Setting EnableTrace starts the tracing process. Therefore, you must define the
            property values for the trace file before you enable tracing. Once the tracing process
            starts, the values of TraceFile and RecreateTrace cannot be changed.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessTrace.TraceFile">
            <summary>
            Specifies the path and name of the trace file. 
            </summary>
            <remarks>
            The initial default value is \OpenAccessTrace.txt. If the
            trace file does not exist, the data provider creates it.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessTrace.RecreateTrace">
            <summary>
            Recreates the trace file each time the application restarts. By default, the
            trace file is appended.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction">
            <summary>
            Represents the transaction that will be 
            performed on a database using the SuiteAnalyticsConnect 
            data provider.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction.footprint">
            <summary>
            Footprint Information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction.Commit">
            <summary>
            Completes a transaction. Modifications made during a transaction 
            become a permanent part of the database.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction.Rollback">
            <summary>
            Cancels modifications made during a transaction, and  
            no changes are made to the database.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction.CheckState">
            <summary>
            Check if the current transaction is in ASctive State
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessTransaction.IsolationLevel">
            <summary>
            Defines the isolation level for the entire transaction.
            If the value is changed, the new value is used at execution time.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessUtil.footprint">
            <summary>
            Footprint information field
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessUtil.#ctor">
            <summary>
            private ctor to prevent creating any instance of this class
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessUtil.SQLTypeName2OpenAccessDbType(System.String)">
            <summary> This method takes a OpenAccessDbType and returns the appropriate SuiteAnalyticsConnect TYPE STRING
            </summary>
            <param name="iTypeName">OpenAccessDbType
            </param>
            <returns>OpenAccessDbType
            </returns>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessValueUnion.footprint">
            <summary> 
            Footprint information field
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessValueUnion.Value">
            <summary>
            Note: This property is provided for completeness.
            It should probably never be used for performance
            reasons.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.ssp.DmEntity">
            DataModel entity types
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.ssp.DmAttribute">
            DataModel attributes
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            ICollection implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.GetEnumerator">
            IEnumerable implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.#ctor">
            PUBLIC METHODS (,properties and constructors)
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.complete(System.Boolean,System.Int32)">
            MUST be called before accesing any of the describe info
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.Count">
            ICollection 
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.IsSynchronized">
            ICollection implementation
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMap.SyncRoot">
            ICollection implementation
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.DescribeMapEnumerator.Reset">
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.ssp.StatementContext.#ctor(NetSuite.SuiteAnalyticsConnect.ssp.ConnectionContext,NetSuite.SuiteAnalyticsConnect.ssp.SessionContext)">
            Because the OPEN packet is deferred, the statement is not
            active at the server after the constructor finished.
            Use the isActive property to check whether the OPEN codec
            succeeded.
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.DllConfigurationSettings">
            <summary>
             dllConfigurationSettings is similar to <c>ConfigurationSettings</c> except that it works
             with dlls.  If a calling assembly is c:\foo.dll then this class will open the file c:\foo.dll.config 
             and parse its xml configuration file, which conforms to the same schema as an application 
             configuration file. For GAC-resident assemblies, configuration files are expected to reside
             in the base directory of the current application domain.
            </summary>
            <remarks>
            This class is capable of maintaining the configuration settings for multiple dll assemblies. 
            For example, dllConfigurationSettings.AppSettings["dsn"] will extract the value of the dsn
            property from foo.dll.config should it be used within foo.dll and from bar.dll.config should
            it be used within bar.dll.
            <para> </para>
            Note: This class cannot be used by assemblies loaded from byte arrays.
            <para> </para>
            <para>@version 05-10-2004 (ssalas) - manages config settings for multiple assemblies</para>
            <para>@version 12-01-2002 (bwaldron) - created</para>
            </remarks>
            <example>
            [C#]
            string sDataSource = dllConfigurationSettings.AppSettings["dsn"];
            [VB .NET]
            Dim sDataSource as String = dllConfigurationSettings.AppSettings("dsn");
            </example>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.DllConfigurationSettings.ReadXML(System.String,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            Parse the specified config file and put the contents of appSettings into a name/val collection.
            </summary>
            <param name="configFile">File path from which config settings should be read.</param>
            <param name="settings">Settings read from specified config file.</param>
            <exception cref="T:System.Configuration.ConfigurationException">If failed to read XML content of config file.</exception>
            <remarks>
            <para>@version 05-10-2004 (ssalas) - parses specified config file into specified collection</para>
            <para>@version 12-01-2002 (bwaldron) - created</para>
            </remarks>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.DllConfigurationSettings.dllSettings">
            <summary>
            Stores name/value collection per config file path (each path derived from calling assembly).
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.DllConfigurationSettings.AppSettings">
            <summary>
            Reads the appSettings section of the config file associated with the calling assembly.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">If config file for calling assembly cannot be found or accessed.</exception>
            <exception cref="T:System.Configuration.ConfigurationException">If config file for calling assembly contains invalid content or cannot be read.</exception>
            <remarks>
            This cannot be used by assemblies loaded from byte arrays.
            <para> </para>
            <para>@version 05-10-2004 (ssalas) - when assembly in GAC, pull config file from base dir of current app domain</para>
            <para>@version 05-10-2004 (ssalas) - tracks config settings per calling assembly</para>
            <para>@version 12-01-2002 (bwaldron) - created</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQL" -->
        <member name="F:DDInt.Parser.BaseSQL.SQL_UNKNOWN">
            SQL is of unknown type.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_SELECT">
            SQL is a SELECT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_CREATE_TABLE">
            SQL is a CREATE TABLE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_CALL">
            SQL is a CALL statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_INSERT_TABLE">
            SQL is a INSERT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_UPDATE_TABLE">
            SQL is a UPDATE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_DELETE_TABLE">
            SQL is a DELETE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_UNKNOWN_CREATE_STMT">
            SQL is an unknown CREATE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQL">
            SQL specified by the application.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_hasForUpdate">
            True if sql contains a FOR UPDATE [ OF column_name [ ,...n ] ] clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasReadOnly">
            True if sql contains a FOR READ ONLY clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.escapeTranslator">
            Used to translate ODBC style escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.processLevel">
            Specifices to what level the SQL needs to be processed.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQL.quote">
            Quote character for string literals and quoted identifiers.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.type">
            One of the SQL_ constants.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.treeRoot">
            Special SQL statement root node.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.createTableColumnSpecificationNodes">
            !!!Change once DB2 has changed interface!!!
            This vector actually just contains a BaseSQLListManipulator.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.selectListManipulator">
            Used to modify the select list.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasEscape">
            true if sql contains at least one escape.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.mayHaveParameters">
            A guess as to whether or not the statement contains parameter markers.
            A true indicates that the statement may contain parameter markers.
            A false indicates that the statement does not contain parameter markers.
            False is definitive and true isn't.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_isBatch">
            true if contains a batch of SQL statements.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQLs">
            Batch of BatchSubStatements if in batch mode.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.currentBatch">
            Current batch statment in the interation.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.tableInfo">
            Just holds the object created by BaseSQLParser.  
            
            See the documentation there.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,System.Int32,System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,DDInt.Parser.BaseSQL)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(DDInt.Parser.BaseSQL,System.Int32)">
            Constructor that copies everything except the processing level
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor to prepare for a batch of SQL statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.dumpTree">
            Prints the tree to System.out
        </member>
        <member name="M:DDInt.Parser.BaseSQL.processSQL">
            Builds the SQL tree and translates escapes.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.nextBatchStatement">
             Position to the next SQL statement in a batch.
            
             @return - true if moved to next, false if no more statements
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isBatch">
            Returns true if contains a batch of SQL statements.
            If so, next() is used to interate through the batch.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.batchSize">
            Returns number of batch statements being contained
        </member>
        <member name="M:DDInt.Parser.BaseSQL.addToBatch(System.String,System.Int32)">
            Adds a statement to the batch of statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.clearBatch">
            Resets batch statement list.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getOriginal">
            Return SQL text originally specified by the application.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getVerb">
             Returns the VERB string.
            
             @return String - the SQL verb associated with original SQL.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getType">
             Get accessor for the "type" field.
            
             @return int - one of the SQL_ constants
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isStatementSuitableForAutoGeneratedKeys">
             Determines if the statement is suitable for the return of auto-generated
             keys. To be suitable, the statement must be a single INSERT.
            
             @return true if statement is suitable for the return of auto-generated
             keys; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isCallEscapeStatement">
             Determines if statement is a call escape.
            
             @return true if statement is a call escape; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFormatted">
             Returns processed SQL.
            
             @return String - SQL that has (maybe) been massaged for execution
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateTableSpecification">
             Called to get the table specification for an update statement; that is
             UPDATE or INSERT.
            
             @return String - table name
             @return 'null'- not an update statement, or the table name could not
             be found/parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateColumnSpecification(System.Int32)">
             Returns the name of the column being updated associated with the
             parameter specified.  If there is no column specification then the
             ordinal position of the parameter in the values list is returned.
            
             Note that most of the implementation of this method was written in
             terms of exisiting primitive-like methods.  Some of the called
             methods may not seem to fit the context of this method, but the
             implementations of the called methods perform the correct mechanics.
             Perhaps the primitive-like method names should change to reflect their
             general use.
            
             @param - int valueListParameterPosition - ordinal position of a
             parameter in a values list for an insert or update statement
            
             @return String - column name or ordinal parameter position
             @return null - if column name does not exist or cound not be found,
             and/or oridinal parameter position could not be located in the values
             list
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildSQLTree">
             Creates the SQL tree.
            
             @exception SQLException
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount">
             Returns the number of parameter markers in a SQL statement using
             the SQLDialect in force
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount(DDInt.Parser.SQLDialect)">
             Returns the number of parameter markers in a SQL statement using
             the specified SQLDialect.
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStatementCount">
            Returns the number of statements recognized in the executing SQL
            
            Warning: whether or not a statement is properly recognized may be
            affected by the presence of native syntax.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setParameter(System.Int32,System.String)">
             Changes the string value for a parameter marker
            
             @param index - zero based parameter
             @param value - new parameter marker value
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStringPreceedingParameter(System.Int32)">
             Returns a string containing the string immediately preceeding
             the specified parameter marker. Returns a null object reference if:
                - nothing preceeds the specified parameter marker,
            
             @param index - zero based parameter
        </member>
        <member name="M:DDInt.Parser.BaseSQL.resultType">
             Determines if SQL returns a result set or an update count.
            
             Issues/Bugs:
            
             - Determining SQL type does not take into account that there may
               actually be more than one statement concatenated;
               e.g. "select * from foo select * from bar"
            
             @return bool - true if a select
                               false otherwise
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecificationCount">
             Returns the number of columns definitions in a create table statement.
            
             Note this method MUST be called before calling
             get/setCreateTableColumnSpecification.
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecification(System.Int32)">
             Returns a ArrayList of column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setCreateTableColumnSpecification(System.Int32,System.String)">
             Sets the new column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListCount(DDInt.Parser.BaseSQLTreeNode,System.Collections.ArrayList)">
             Returns the number of list elements in the first top level paren expression.
            
             Note this method MUST be called before calling
             get/setFirstTopLevelParenExpListElement
            
             @param list - empty list that will be subsequently used to pass to
             related methods
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32)">
             Returns a vector of list elements in the first top level paren expression tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32,System.String)">
             Sets the new list element in the first top level paren expression.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecificationCount">
             Returns the number of column definitions in a SELECT statement.
            
             Note that 1 will be returned if the column spec list is actually empty;
             e.g. "create table foo ()"
            
             Note this method MUST be called before calling
             get/setSelectColumnSpecification.
            
             @return int - number of columns, -1 if not a select statement or ill
             formed select statement
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecification(System.Int32)">
             Returns a ArrayList of select column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getSelectColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setSelectColumnSpecification(System.Int32,System.String)">
             Sets the new select column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsValue(System.Collections.ArrayList,System.String)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsNode(System.Collections.ArrayList,System.Int32)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildFromParts(System.Collections.ArrayList,System.String)">
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSingleTableFromSpecification">
            Returns table name if selecting from a single table, otherwise returns null
        </member>
        <member name="M:DDInt.Parser.BaseSQL.lookForSelectNodeType(System.Int32)">
            Returns true if a node of the given type is found in the tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly">
            Returns true if the sql contains a FOR READ ONLY clause; false,
            otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly(System.Boolean)">
            Used by the parser to record the presence of a FOR READ ONLY clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate">
            Returns true if the sql contains a FOR UPDATE clause; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate(System.Boolean)">
            Used by the parser to record the presence of a FOR UPDATE clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasGroupBy">
            Returns true if contains a 'group by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasWhereClause">
            Returns true if contains a 'where' clause
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasHaving">
            Returns true if contains a 'having'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSetOperation">
            Returns true if contains a set operation; e.g. 'union'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasOrderBy">
            Returns true if contains a 'order by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasAggregateOrParameterInSelectList(System.String[])">
            Returns true if the select list contains an aggregate function.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSelectDistinct">
            Returns true if select is followed by the distinct keyword
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsParameterMarker(System.String,DDInt.Parser.SQLDialect)">
            		 * Guesses whether or not the statement contains parameter markers.
                     * 
                     * The scan is a guess because it doesn't take into consideration 
                     * delimited strings or comments.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsEscape">
            Determines if the statement contains escapes.
        </member>
        <member name="T:DDInt.Parser.BaseSQL.BaseBatchSubStatement">
            Contains a SQL statment and its needed processing level.
        </member>
        <member name="T:DDInt.Parser.BaseSQLEscapeProcessor">
             Finds escapes in the SQL tree, sends them to the escape translator,
             and patches the translations back in.
            
             Note that nested escapes are handled by the escape parser, so they
             are not processed by this class as a separate escape.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.translator">
            Used to translate escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.escapeNode">
            Escape node that will be replaced with the translation.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.whereNode">
            'where' node, if any, associated with the current escape
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.getWhereClause(DDInt.Parser.BaseSQLTreeNode)">
             Finds and returns the 'where' clause.
            
             Look up through the tree until the 'from' is
             found, then look at 'from' siblings until 'where' is found.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.replaceEscape(System.String,System.String)">
            Updates the SQL tree with the translated escape.
        </member>
        <member name="T:DDInt.Parser.BaseSQLFromSpecificationGenerator">
            <summary>
            Summary description for BaseSQLFromSpecificationGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLFromSpecificationGenerator.objectsInSpecification">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLListManipulator">
            <summary>
            Summary description for BaseSQLListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListManipulator.listElements">
            Contains the list elements.
            Even indices are index.
            Odd indices are nodes.
        </member>
        <member name="M:DDInt.Parser.BaseSQLListManipulator.setElement(System.Int32,System.String)">
             Sets the list element to the given value.
            
             This is done buy "emptying" this current list value nodes
             (but leaving them intact), creating a sub-tree out of the new value,
             and making this new sub-tree a child of the last node in the 
             original list.
        </member>
        <member name="T:DDInt.Parser.BaseSQLListPartManipulator">
            <summary>
            Summary description for BaseSQLListPartManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the select list:
            select a as x, b as z from foo
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.stopLevel">
            Level at which the LIST_PART is located, used to stop the traversal.
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.selectListReplacement">
            If non-null, replace the select list with this string
        </member>
        <member name="T:DDInt.Parser.BaseSQLNodeLocator">
            <summary>
            Summary description for BaseSQLNodeLocator.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParameterProcessor">
            <summary>
            Summary description for BaseSQLParameterProcessor.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParenExpListManipulator">
            <summary>
            Summary description for BaseSQLParenExpListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the column list:
            create table foo (a int, b int)
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQLParser" -->
        <member name="F:DDInt.Parser.BaseSQLParser.sqlProcessor">
             Used to record positions of certain UPDATE/INSERT statemet clauses.
            
             !!!REVISIT!!!
             Instead of recording positions of various clauses in the sqlProcessor,
             create a BaseSQLTreeNode nodes that encapsulate the meaning and search
             for it when processing the semantics of the statement.  For example,
             BaseSQLTreeNode.NODE_TABLE_NAME node could be used to identify an
             UPDATE statement's table.
            
             !!!REVISIT!!!
             Note that current check to see if sqlProcessor is null are no longer
             needed.  In the past replaced clauses were re-parsed (e.g., escape
             translations).  This is still true, but the parse level is always
             PROCESS_PARAMS, so no UPDATE/INSERT clauses are ever parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.scanner">
            Lexical analyzer.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.nodeSubParse">
            Set by parsing methods to indicate the result of a sub parse
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.tableInfo">
            Each vector element is an array of two Objects.  The first object,
            element  [0], is the root node of the possibly qualfied table name.  
            The second object, element [1], will be the root node of the correlation 
            name.
            
            tableInfo will be maintained when PROCESS_TABLES is on, and will only
            process table information in the context of a 'FROM' clause.
            
            Note that instead of generic containers with casts, a new class for 
            describing the table, and a new class to contain the new table class 
            could be written.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.processLevel">
            Specifices to what level the SQL needs to be parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.escapeTranslator">
            Used to indicate the type of escape parsing required.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.m_sqlDialect">
            Used to indicate the dialect of SQL being parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.#ctor(DDInt.Common.CommonEscapeTranslator,System.Int32,System.Boolean,DDInt.Parser.SQLDialect)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.setUp(DDInt.Parser.BaseSQL)">
            Setter of BaseExceptions.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parse(System.String,System.Char)">
             Parses the given SQL statement and returns the root
             node of the representative tree.
            
             @return BaseSQLTreeNode - root of the SQL tree if successfully parsed.
             @deprecated SQLException - fatal exception
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSQL" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatement">
            		 * Parses the Statement non-terminal.
            		 *
            		 * Statement
            		 *     ::= SelectStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= InsertStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= UpdateStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            	     *     ::= CreateStatement
            		 *         NODE_STATEMENT_ROOT
            	     *         $1
            		 *
            	     *     ::= DeleteStatement
            	     *         NODE_STATEMENT_ROOT
            	     *         $1
            	     *
            		 *     ::= UnknownStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatementList">
             Parses the StatementList non-terminal.
            
             StatementList
                 ::= Statement StatementSeparator _EndOfStatementTerminal
                     $1 -> [$2] -> $3
            
                 ::= Statement StatementSeparator StatementList
                     $1 -> [$2] -> $3
            
                 ::= _EndOfStatementTerminal
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseStatementSeparator" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseCreateStatement">
             Parses the CreateStatement non-terminal.
            
             CreateStatement
                 ::= _CREATE_TABLE AlmostAnything
                     NODE_CREATE_STATEMENT
                     $1 $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSelectStatement">
             Parses the SelectStatement non-terminal.
            
             SelectStatement
                 ::= QueryExpression OrderByClause ForClause
                     NODE_SELECT_STATEMENT
                     $1 -> [$2] -> [$3]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQueryExpression">
             Parses the QueryExpression non-terminal.
            
             QueryExpression
                 ::= _SELECT List FromClause WhereClause GroupByClause HavingClause SetOperation
                     NODE_QUERY_EXP
                     $1 -> $2 -> [$3] -> $4 -> [$5] -> [$6] -> [$7]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDeleteStatement">
             Parses the DeleteStatement non-terminal.
            
             DeleteStatement
                 ::= _DELETE _FROM QualifiedName WhereClause
                     NODE_DELETE_STATEMENT
                     $1 -> $2 -> $3 -> $4
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseInsertStatement">
             Parses the InsertStatement non-terminal.
            
             InsertStatement
                 ::= _INSERT _INTO QualifiedName ColumnList _VALUES ParenthesizedExpression
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
            
                 ::= _INSERT _INTO QualifiedName ColumnList SubQuery
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5
            
                 ::= _INSERT _INTO QualifiedName ColumnList _DEFAULT _VALUES
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUpdateStatement">
             Parses the UpdateStatement non-terminal.
            
             UpdateStatement
                 ::= _UPDATE QualifiedName _SET List WhereClause
                     NODE_UPDATE_STATEMENT
                     $1 -> $2 -> $3 -> $4 -> $5
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQualifiedName">
             Parses the QualifiedName non-terminal.
            
             QualifiedName
                 ::= _IdentifierOrUnknownKeyword(false) [ _Dot ... _IdentifierOrUnknownKeyword(false) ] ...
                     NODE_UNKNOWN
                     $1 -> [ $2 -> ... ]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatement">
             Parses the UnknownStatement non-terminal.
            
             UnknownStatement
                 ::= UnknownStatementComponents
                     NODE_UNKNOWN_STATEMENT
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatementComponents">
             Parses the UnknownStatementComponents non-terminal.
            
             UnknownStatementComponents
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _Parameter UnknownStatementComponents
                     $1 -> $2
            
                 ::= Escape UnknownStatementComponents
                     $1 -> $2
            
                 ::= _AnyToken UnknownStatementComponents
                     $1 -> $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseList">
             Parses the List non-terminal.
            
             List
                 ::= AlmostAnything(true,false)
                     NODE_LIST_PART
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseFromClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseWhereClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parsePredicate" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parsePredicateType">
             Parses the PredicateType non-terminal.
            
             PredicateType
            		::= ComparisonPredicate
             	::= BetweenPredicate
             	::= InPredicate
             	::= LikePredicate
             	::= ExisitsPredicate
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseComparisonPredicate">
             Parses the ComparisonPredicate non-terminal.
            
              ComparisonPredicate
             	::= ValueExpression CompOp ValueExpression
              
              CompOp
             	::= _Equal
             
             	::= _LessThan
             
             	::= _LessThanOrEqual
             
             	::= _GreaterThan
             
             	::= _GreaterThanEqual
             
             	::= _Unequal
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseBetweenPredicate">
             Parses the BetweenPredicate non-terminal.
            
              BetweenPredicate
             	::= ValueExpression BetweenExpression 
             		 ValueExpression _And ValueExpression 
             
             BetweenExpression
             	::= Not_opt _Between
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseGroupByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseHavingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseForClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSetOperation" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrespondingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseByPart" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperationLastPart">
             Parses the SetOperationLastPart non-terminal.
            
             SetOperationLastPart
                 ::= QueryExpression
                     NODE_UNKNOWN
                     $1
            
                 ::= AlmostAnything(true,false)
                     NODE_UNKNOWN
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOrderByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAllPart" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseColumnList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperator">
             Parses the SetOperator non-terminal.
            
             SetOperator
                 ::= _UNION
                     $1
            
                 ::= _INTERSECT
                     $1
            
                 ::= _EXCEPT
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAlmostAnything(System.Boolean,System.Boolean,System.Object[])" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseParenthesizedExpression">
             Parses the ParenthesizedExpression non-terminal.
            
             ParenthesizedExpression
                 ::= _LeftParen AlmostAnything(false,true) _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSubQuery">
             Parses the SubQuery non-terminal.
            
             SubQuery
                 ::= _LeftParen QueryExpression _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscape">
             Parses the Escape non-terminal.
            
             Escape
                 ::= CallEscape
                     $1
            
                 ::= FunctionEscape
                     $1
            
                 ::= OuterJoinEscape
                     $1
            
                 ::= TimeEscape
                     $1
            
                 ::= DateEscape
                     $1
            
                 ::= TimestampEscape
                     $1
            
                 ::= EscapeEscape
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimeEscape">
             Parses the TimeEscape non-terminal.
            
             TimeEscape
                 ::= _LeftBrace _T _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIME escape.
                     NODE_TIME_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _T RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDateEscape">
             Parses the DateEscape non-terminal.
            
             DateEscape
                 ::= _LeftBrace _D _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the DATE escape.
                     NODE_DATE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _D RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimestampEscape">
             Parses the TimestampEscape non-terminal.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIMESTAMP escape.
                     NODE_TIMESTAMP_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _TS RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeEscape">
             Parses the EscapeEscape non-terminal.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the ESCAPE escape.
                     NODE_ESCAPE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _ESCAPE RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingStringLiteralEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseFunctionEscape">
             Parses the FunctionEscape non-terminal.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the FUNCTION escapes.
                     NODE_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _FN RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseCallEscape">
             Parses the CallEscape non-terminal.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_PROCEDURE escapes.
                     NODE_CALL_PROCEDURE_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_FUNCTION escapes.
                     NODE_CALL_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5 -> $6 -> $7
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3 -> $4 -> $5...
            
             Common CallEscape endings are parsed via parseRemainingCallEscape.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingCallEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinEscape">
             Parses the OuterJoinEscape non-terminal.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the OUTER_JOIN escapes.
                     NODE_OUTER_JOIN_ESCAPE
                     $1 -> $2 -> $3 -> $4
            
                 ::= _LeftBrace _OJ RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 ->3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOuterJoin" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinOrTableReference">
             Parses the OuterJoinOrTableReference non-terminal.
            
             OuterJoinOrTableReference
                 ::= OuterJoin
                     $1
            
                 ::= TableReference
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseJoinType(DDInt.Parser.BaseSQLTreeNode)">
             Parses the JoinType non-terminal.
            
             JoinType
                 ::= _LEFT _OUTER _JOIN
                     NODE_LEFT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _RIGHT _OUTER _JOIN
                     NODE_RIGHT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _FULL _OUTER _JOIN
                     NODE_FULL_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
             The method updates the type of the node as well.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTableReference">
             Parses the TableReference non-terminal.
            
             TableReference
                 ::= QualifiedName CorrelationName
                     NODE_TABLE_REFERENCE
                     $1 -> [$2]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.lookAheadForVerboseJoinOutsideOJEscape">
            Looks ahead for certain join related keywords.
            
            The state of the parser is unaffected by
            this method.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrelationName" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSearchCondition">
             Parses the SearchCondition non-terminal.
            
             SearchCondition
                 ::= AlmostAnything(true,false);
                     NODE_SEARCH_CONDITION
                     $1
            
             A search condition is everything up to the next ON keyword or
             until the end of the escape is encountered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameters">
             Parses the EscapeParameters non-terminal.
            
             EscapeParameters
                 ::= EscapeParameter _Comma EscapeParameters
                     $1 -> $2 -> $3
            
                 ::= EscapeParameter
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameter">
             Parses the EscapeParameter non-terminal.
            
             EscapeParameter
                 ::= EscapeParameterComponents
                     NODE_ESCAPE_PARAMETER
                     $1
            
             A parameter is everything up to the next comma or right paren.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterComponents" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseRestOfEscape(System.Int32)">
             Parses the RestOfEscape non-terminal.
            
             RestOfEscape
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _RightBrace(translationNeeded)
                     $1
            
                 ::= Escape RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _Parameter RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _AnyToken RestOfEscape(translationNeeded)
                     $1 -> $2
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseParameter" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchGroupBy">
             Parses the GROUP BY terminals.
            
             _GROUP_BY
                 ::= TOKEN_ID_OR_KEYWORD("group") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchHavingTerminal">
             Matches the HAVING terminal.
            
             _HAVING
                 ::= TOKEN_ID_OR_KEYWORD("having")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOrderByTerminal">
             Matches the ORDER BY terminals.
            
             _ORDER_BY
                 ::= TOKEN_ID_OR_KEYWORD("order") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnionTerminal">
             Matches the UNION terminals.
            
             _UNION
                 ::= TOKEN_ID_OR_KEYWORD("union")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntersectTerminal">
             Matches the INTERSECT terminals.
            
             _INTERSECT
                 ::= TOKEN_ID_OR_KEYWORD("intersect")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExceptTerminal">
             Matches the EXCEPT terminal.
            
             _EXCEPT
                 ::= TOKEN_ID_OR_KEYWORD("except")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchByTerminal">
             Matches the BY terminal.
            
             _BY
                 ::= TOKEN_ID_OR_KEYWORD("by")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCreateTable">
             Parses the CREATE TABLE terminals.
            
             _CREATE_TABLE
                 ::= TOKEN_ID_OR_KEYWORD("create") TOKEN_ID_OR_KEYWORD("table")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSelectTerminal">
             Matches the SELECT terminal.
            
             _SELECT
                 ::= TOKEN_ID_OR_KEYWORD("select")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFromTerminal">
             Matches the FROM terminal.
            
             _FROM
                 ::= TOKEN_ID_OR_KEYWORD("from")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhereTerminal">
             Matches the WHERE terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("where")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNotTerminal">
             Matches the NOT terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("not")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNullTerminal">
             Matches the NULL terminal.
            
             _NULL
                 ::= TOKEN_ID_OR_KEYWORD("null")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExistsTerminal">
             Matches the EXISTS terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("exists")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchBetweenTerminal">
             Matches the BETWEEN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("between")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLikeTerminal">
             Matches the LIKE terminal.
            
             _LIKE
                 ::= TOKEN_ID_OR_KEYWORD("like")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInTerminal">
             Matches the IN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("in")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAllTerminal">
             Matches the ALL terminal.
            
             _ALL
                 ::= TOKEN_ID_OR_KEYWORD("all")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCorrespondingTerminal">
             Matches the CORRESPONDING terminal.
            
             _CORRESPONDING
                 ::= TOKEN_ID_OR_KEYWORD("corresponding")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInsertTerminal">
             Matches the INSERT terminal.
            
             _INSERT
                 ::= TOKEN_ID_OR_KEYWORD("insert")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDeleteTerminal">
             Matches the DELETE terminal.
            
             _DELETE
                 ::= TOKEN_ID_OR_KEYWORD("delete")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSetTerminal">
             Matches the SET terminal.
            
             _SET
                 ::= TOKEN_ID_OR_KEYWORD("set")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntoTerminal">
             Matches the INTO terminal.
            
             _INTO
                 ::= TOKEN_ID_OR_KEYWORD("into")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUpdateTerminal">
             Matches the UPDATE terminal.
            
             _UPDATE
                 ::= TOKEN_ID_OR_KEYWORD("update")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchValuesTerminal">
             Matches the VALUES terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("values")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDefaultTerminal">
             Matches the DEFAULT terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("default")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOnTerminal">
             Matches the ON terminal.
            
             _ON
                 ::= TOKEN_ID_OR_KEYWORD("ON")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCrossTerminal">
             Matches the CROSS terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("CROSS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInnerTerminal">
             Matches the INNER terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("INNER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchJoinTerminal">
             Matches the JOIN terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("JOIN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUsingTerminal">
             Matches the USING terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("USING")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftTerminal">
             Matches the LEFT terminal.
            
             _LEFT
                 ::= TOKEN_ID_OR_KEYWORD("left")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightTerminal">
             Matches the RIGHT terminal.
            
             _RIGHT
                 ::= TOKEN_ID_OR_KEYWORD("right")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFullTerminal">
             Matches the FULL terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("full")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterTerminal">
             Matches the OUTER terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("OUTER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterJoinTerminal">
             Matches the OUTER JOIN terminals.
            
             _OUTER _JOIN
                 ::= TOKEN_ID_OR_KEYWORD("outer") TOKEN_ID_OR_KEYWORD("join")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOjTerminal(System.Int32)">
             Matches the OJ terminal.
            
             _OJ
                 ::= TOKEN_ID_OR_KEYWORD("OJ")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCallTerminal">
             Matches the CALL terminal.
            
             _CALL
                 ::= TOKEN_ID_OR_KEYWORD("CALL")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExtTerminal">
             Matches the EXT terminal.
            
             _EXT
                 ::= TOKEN_ID_OR_KEYWORD("EXT")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFnTerminal(System.Int32)">
             Matches the FN terminal.
            
             _FN
                 ::= TOKEN_ID_OR_KEYWORD("FN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDTerminal(System.Int32)">
             Matches the D terminal.
            
             _D
                 ::= TOKEN_ID_OR_KEYWORD("D")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTTerminal(System.Int32)">
            		 * Matches the T terminal.
            		 *
            		 * _T
            		 *     ::= TOKEN_ID_OR_KEYWORD("T")
            		 *         NODE_UNKNOWN
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTsTerminal(System.Int32)">
             Matches the TS terminal.
            
             _TS
                 ::= TOKEN_ID_OR_KEYWORD("TS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEscapeTerminal">
             Matches the ESCAPE terminal.
            
             _ESCAPE
                 ::= TOKEN_ID_OR_KEYWORD("ESCAPE")
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchScalarFunctionNameTerminal" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchStringLiteralTerminal">
             Matches a string literal terminal.
            
             _StringLiteral
                 ::= TOKEN_STRING_LITERAL
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIdentifierOrUnknownKeyword(System.Boolean)">
             Matches a delimited identifier, identifier, or keyword terminal.
            
             Parse modifier:
             bool ignoreKeyWords
            
             _IdentifierOrUnknownKeyword
                 ::= TOKEN_DELIMITED_ID
                     NODE_UNKNOWN
            
                 ::= TOKEN_ID_OR_KEYWORD
                     // Reduction only valid if ignoreKeyWords is true and
                     // the current token is any of the ones defined below.
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnknownTokenTerminal">
             Matches a unknown_token terminal.
            
             _UnknownToken
                 ::= TOKEN_UNKNOWN
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTerminal(System.Int32,System.Int32,System.Boolean)">
            Matches a special character terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSemicolonTerminal">
             Matches the ';' terminal.
            
             _Semicolon
                 ::= TOKEN_SPECIAL_CHAR(";")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEqualOperatorTerminal">
             Matches the '=' terminal.
            
             _EqualOperator
                 ::= TOKEN_SPECIAL_CHAR("=")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCommaTerminal">
             Matches the ',' terminal.
            
             _Comma
                 ::= TOKEN_SPECIAL_CHAR(",")
                     NODE_COMMA
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCompareOpTerminal">
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDotTerminal">
             Matches a '.' terminal.
            
             _Dot
                 ::= TOKEN_SPECIAL_CHAR(".")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftParenTerminal">
             Matches the '(' terminal.
            
             _LeftParen
                 ::= TOKEN_SPECIAL_CHAR("(")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightParenTerminal">
             Matches the ')' terminal.
            
             _RightParen
                 ::= TOKEN_SPECIAL_CHAR(")")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftBraceTerminal(System.Int32)">
             Matches the '{' terminal.
            
             _LeftBrace
                 ::= TOKEN_SPECIAL_CHAR("{")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightBraceTerminal(System.Int32)">
             Matches the '}' terminal.
            
             _RightBrace
                 ::= TOKEN_SPECIAL_CHAR("}")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEndOfStatementTerminal">
             Matches the EOS terminal.
            
             _EndOfStatementTerminal
                 ::= TOKEN_END_OF_SQL
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchAnyToken" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchKeywordTerminal(System.String,System.Boolean)">
            Matches any keywork terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhiteSpaceOrComment">
            Matches a white_space terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAlmostAnyTokens(System.Int32[])">
             Matches all tokens up to a TOKEN_END_OF_SQL or any TOKEN_SPECIAL_CHAR
             whose value is identified in the specified exceptList.
            
             @return returns true if one or more tokens were matched; false,
             otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.getEscapeTranslationNeeded(System.Int32)">
            Indirection to the escape translator in case one was not provided.
        </member>
        <member name="T:DDInt.Parser.BaseSQLPredicateParamProcessor">
            Extracts parameter metadata identifying information for all predicates
            
            Algorithm :
            
            - Make a pass through the tree gathering all param nodes
            
            - For each parameter node, search back up the tree towards the root 
            looking for nearest predicate ancestor if any - adding such predicates 
            to a list
            
            - For each predicate node, identify the part of the predicate that can 
            be used to describe the parameters contained in the predicate.   Each
            predicate type has specific logic/code for determing this.
            
            - Parameter metadata descriptions can be in two forms.  It can be a 
            sub query which produces a single value.  Or it can be "anything else".
            If its a sub query, then the sub query minus anything past the 'where'
            clause describes the parameter.  If it's not a sub query, then the 
            "anything else" is used as column description in a secondary select
            statement built from the parts of the enclosing select statement.
            
            If its a sub query, construct a new "where 0=1" select statement out
            of the sub query.
            
            If its "anything else" construct select statement the enclosing select
            as the basis, with the "anything else" part as the column definition.
            Again with a "where 0=1" clause. 
        </member>
        <member name="M:DDInt.Parser.BaseSQLPredicateParamProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner">
            Tokenizes SQL.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.sql">
            SQL being tokenized.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.stringLiteralDelimitor">
            Literal delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.delimitedIdentifierDelimitorsBegin">
            Delimited Identifier Delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentState">
            State object that will process the next char.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.scanPosition">
            Current scan index in the SQL string.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.nextToken">
            Token being built
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.cachedToken">
            Cached token always return from getToken method
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentTokenValue">
            Current token being built.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setup(System.String,System.Char,System.Char,DDInt.Parser.SQLDialect)">
             Sets up for use.
            
             @param SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getSQL">
             Returns the original SQL.
            
             @returns SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getNextToken">
             Returns the next token in the SQL.
            
             @return BaseSQLToken
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setNextState(System.Int32)">
             Transition to another state.
            
             @param state - state constant
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidFirstCharForIdentifierOrKeyword(DDInt.Parser.SQLDialect,System.Int32)">
             Returns true if the character is a valid first char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidCharForIdentifierOrKeyword(System.Int32)">
             Returns true if the character is a valid (middle or end) char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isWhiteSpace(System.Int32)">
             Returns true if the character is white space
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isNonCommentRelatedSpecialCharacter(System.Int32)">
             Returns true if the character is a special character not already
             part of other token semantics.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setEndOfToken(System.Int32)">
            Signals that a token has been found and sets its type.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidNativeParameterToken(DDInt.Parser.BaseSQLScanner)">
            This method checks to see if the currently tokenized value violates
            any native parameter name rules.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState">
            Base class that represents a scanner state.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStartState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCompareOpState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeCOrCPPCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeSQLCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerRestOfLineCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerIDOrKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerUnknownState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLWhiteSpaceState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.initialize">
            Called when transitioning to 'this' state
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLAddingWrapperContentsState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerAtParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="T:DDInt.Parser.BaseSQLStringGenerator">
            <summary>
            Summary description for BaseSQLStringGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.findVerbOnly">
            If true then the generator quits after the verb is found.
            If a "create" statement is found then both "create" and the next
            word is returned, otherwise just the first word is returned.
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.whereZeroEqualOne">
            If true then the generator generates "where 0 = 1" for 
            "where" clauses
        </member>
        <member name="T:DDInt.Parser.BaseSQLToken">
            <summary>
            Summary description for BaseSQLToken.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_value">
            Token string value.
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_type">
            One of the BaseSQLScanner.TOKEN_ constants.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNode">
            <summary>
            Summary description for BaseSQLTreeNode.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ROOT">
            sub-tree contains escape, with possibly nested escapes
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIME_ESCAPE">
            sub-tree contains time escape
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DATE_ESCAPE">
            sub-tree contains time escape
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIMESTAMP_ESCAPE">
            sub-tree contains time escape
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FUNCTION_ESCAPE">
            sub-tree contains time escape
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_OUTER_JOIN_ESCAPE">
            sub-tree contains outer join escape
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_PROCEDURE_ESCAPE">
            sub-tree contains call procedure escape
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_FUNCTION_ESCAPE">
            sub-tree contains call function escape
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ESCAPE">
            sub-tree contains escape escape
            {escape 'c'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_EXTENSION_ESCAPE">
            sub-tree contains extension escape
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ROOT">
            root node of the entire tree
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_ROOT">
            sub-tree contains a statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SELECT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_INSERT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UPDATE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN_STATEMENT">
            sub-tree contains an unknown statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PAREN_ROOT">
            sub-tree contains contents of ( )
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FROM_CLAUSE">
            sub-tree contains the from clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHERE_CLAUSE">
            sub-tree contains the where clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_GROUPBY_CLAUSE">
            sub-tree contains the group by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SETOP_ROOT">
            sub-tree contains a set operation
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ORDERBY_CLAUSE">
            sub-tree contains the order by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_HAVING_CLAUSE">
            sub-tree contains the having clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIST_PART">
            sub-tree contains part of a comma separated list
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_SEPARATOR">
            sub-tree contains a statement separator.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN">
            node has no special semantic meaning
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ANSI_PARAM">
            node contains a parameter marker
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMA">
            node contains a comma
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHITESPACE">
            node contains whitespace
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMENT">
            node contains a comment
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_QUERY_EXP">
            sub-tree contains a query expression
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TABLE_REFERENCE">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_PARAMETER">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LEFT_OUTER_JOIN_OP">
            sub-tree contains left outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_RIGHT_OUTER_JOIN_OP">
            sub-tree contains right outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FULL_OUTER_JOIN_OP">
            sub-tree contains full outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SEARCH_CONDITION">
            sub-tree contains outer join escape search condition
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CREATE_TABLE_STATEMENT">
            sub-tree contains a create statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FOR_CLAUSE">
            sub-tree contains a for clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_ROOT">
            sub-tree contains a predicate
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_TYPE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMPARISON_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_BETWEEN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_IN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIKE_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_VALUE_EXPRESSION_ROOT">
            sub-tree contains a row value constructor
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DELETE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_AT_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COLON_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_type">
            One of the type constants defined by this class
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_value">
            Value of the node 
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_parent">
            Parent
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_rightSibling">
            Sibling to the right
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_leftMostChild">
            Left-most child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32,System.String)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setParent(DDInt.Parser.BaseSQLTreeNode)">
            Sets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getParent">
            Gets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setNextChild(DDInt.Parser.BaseSQLTreeNode)">
            Set next child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getPrevious">
            Returns the left sibling, or the parent if there is no left sibling.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNodeSearch">
            <summary>
            Summary description for BaseSQLTreeNodeSearch.
            </summary>
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNodeSearch.search(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraverser">
            <summary>
            Summary description for BaseSQLTreeTraverser.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.level">
            Current tree level.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.visitor">
            Callback for visit action.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreePreOrderTraverser">
            <summary>
            Summary description for BaseSQLTreePreOrderTraverser.
            </summary>
        </member>
        <member name="T:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder">
            <summary>
            Provides a way to create and manage the contents of connection 
            strings used by the OpenAccessConnection class.
            </summary>
        </member>
        <member name="F:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.footprint">
            <summary>
            Field for footprint information
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the OpenAccessConnectionStringBuilder class.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OpenAccessConnectionStringBuilder class.
            The connection string provides the data for the instance's connection
            information.
            </summary>
            <param name="connectionString">The basis for the object's internal connection information. Parsed into name/value pairs. 
            Invalid key names raise a KeyNotFoundException.</param>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the OpenAccessConnectionStringBuilder instance.
            </summary>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether an element in the OpenAccessConnectionStringBuilder  
            contains a specific key.
            </summary>
            <param name="keyword">The key to locate in the ConnectionStringBuilder.</param>
            <returns>True if the OpenAccessConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </returns>
            <remarks>The OpenAccessConnectionStringBuilder contains a fixed-size 
            collection of key/value pairs. This means that the ContainsKey method only determines 
            whether a particular key name is valid.</remarks>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the 
            OpenAccessConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed 
            from the connection string in this OpenAccessConnectionStringBuilder instance.</param>
            <returns>True if the key existed within the connection string and was removed, False if the key did not exist</returns>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this 
            OpenAccessConnectionStringBuilder instance.
            </summary>
            <param name="keyword">True if the OpenAccessConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </param>
            <returns>True if the OpenAccessConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </returns>
            <remarks>The OpenAccessConnectionStringBuilder contains a fixed-size 
            collection of key/value pairs. This means that the ShouldSerialize method only determines 
            whether a particular key name is valid.</remarks>
        </member>
        <member name="M:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding 
            to the supplied key from this OpenAccessConnectionStringBuilder.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to keyword.</param>
            <returns>True if keyword was found within the connection string; otherwise, False.</returns>
            <remarks>Calling TryGetValue with a nonexistent key places the value null 
            (or, in Visual Basic, the value Nothing) in the value parameter. </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Keys">
            <summary>
            Gets an ICollection that contains the keys in the DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.IsFixedSize">
            <summary>
            Overridden. Gets a value that indicates whether 
            the OpenAccessConnectionStringBuilder has a fixed size.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ApplicationID">
            <summary>
            Gets or sets a alphanumeric strings passed by a SequeLink Client that identify the client 
            application to a SequeLink service that has been configured to accept connections only 
            from specific application IDs.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.AlternateServers">
            <summary>
            Gets or sets a list of alternate database servers to which 
            the data provider will try to connect if the primary 
            database server is unavailable. Specifying a value for this 
            property enables connection failover for the data provider. 
            </summary>
            <remarks>
            <para>This property corresponds to the Alternate Servers connection string option.</para>
            <para>The value you specify must be in the form of a string 
            that defines connection information for each alternate server.
            For the SuiteAnalyticsConnect data provider, you must specify the port number and the name or the IP address of each alternate server. </para>
            <para>The string has the format:</para> 
            <para><code>(Host=hostvalue;Port=portvalue[;...])</code></para>
            
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.BlockFetchForUpdate">
            <summary>
            Specifies a workaround connection attribute. When the isolation level is Read committed and a SELECT FOR UPDATE statement is issued against some data stores, the ODBC Client does not lock the expected row.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.CertificateStoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store used for client authentication.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ConnectionReset">
             <summary>
             Gets or sets a Boolean value that pecifies whether a connection that is removed from 
             the connection pool for reuse by an application will have its 
             state reset to the initial configuration settings of the connection. 
              
             </summary>
             <remarks><para>This property corresponds to the Connection Reset connection string option.</para>
             <para>When set to False (the initial default), the data provider does not 
            reset the state of the connection.</para>
             <para>
             Resetting the state impacts performance because the new connection must issue additional 
             commands to the server, for example, resetting the current database to the value 
             specified at connect time.</para></remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ConnectionRetryCount">
            <summary>
            Gets or sets the number of times the data provider tries to connect 
            to the primary server, and, if specified, the alternate servers after 
            the initial unsuccessful attempt. 
            
            </summary>
            <remarks><para>This property corresponds to the Connection Retry Count connection string option.</para>
            <para>The value can be any integer from 0 to 65535. </para>
            
            <para>When set to 0 (the initial default), the data provider does not 
            try to reconnect after the initial unsuccessful attempt. </para>
            <para>If a connection is not established during the retry attempts, the data provider returns an error that 
            is generated by the last server to which it attempted to connect.</para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ConnectionRetryDelay">
            <summary>
            Gets or sets the number of seconds the data provider waits after 
            the initial unsuccessful connection attempt before retrying 
            a connection to the primary server, and, if specified, 
            the alternate servers. 
            </summary>
            <remarks><para>This property corresponds to the Connection Retry Delay connection string option.</para> 
            <para>The value can be any integer from 0 to 65535. </para>
            <para>The initial default is 3 (seconds). When set to 0, 
            there is no delay between retrying the connection. </para>
            <para>NOTE: This property has no effect unless the ConnectionRetryCount property is set to an integer greater than 0. </para>
            <para>This property and the ConnectionRetryCount property, 
            which specifies the number of times the data provider attempts to connect 
            after the initial unsuccessful attempt, can be used in conjunction with 
            connection failover.</para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ConnectionTimeout">
            <summary>
            Gets or sets the number of seconds after which the attempted 
            connection to the SuiteAnalyticsConnect server will fail if not yet connected. If connection failover is enabled, this option applies to each connection attempt. 
            </summary>
            <remarks>This property corresponds to the Connection Timeout connection string 
            option.
            <para>When set to 0, the data provider never times out on a connection attempt. 
            The initial default is 30 seconds. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.CryptoProtocolVersion">
            <summary>
            Indicates what Crypto Protocol Version is set.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.CustomProperties">
            <summary>
            Passes custom connection properties defined in the DataSourceIPCustomProperties service attribute directly to the IP layer.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Database">
            <summary>
            Gets or sets the schema name where the connection is connected to.
            </summary>
            <remarks>
            This property corresponds to the Database Name connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.DBUser">
            <summary>
            Gets or sets the database user name where the connection is connected to.
            </summary>
            <remarks>
            This property corresponds to the DBUser connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.DBPassword">
            <summary>
            Gets or sets the database password where the connection is connected to.
            </summary>
            <remarks>
            This property corresponds to the DBPassword connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.EnableTrace">
             <summary>
             Gets or sets a Boolean value that specifies whether tracing is enabled. The initial default is False.
             </summary>
             <remarks>During debugging, sensitive data can be read, even if it is stored as a private or internal variable, and access is limited to the same assembly. To maintain security, trace logs 
             show passwords as five asterisks (*****).
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ParameterMode">
            <summary>
            Gets or sets the parameter mode,  The parameter mode controls the parameter marker format
            and the whether parameters are bound ordinally or by name.
            </summary>
            <remarks>This property corresponds to the Parameter Mode connection string option.</remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Host">
            <summary>
            Gets or sets either the name or the IP address of the SuiteAnalyticsConnect server 
            to which you want to connect. 
            </summary>
            <example>If your network supports
            named servers, you can specify a server name such as <code>OpenAccessAppServer</code>. 
            Or, you can specify an IP address such as <code>122.23.15.12</code>. 
            </example>
            <remarks><para>This property corresponds to the Host connection string option.</para>
            <para>The initial default is <code>localhost</code>. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.HostUser">
            <summary>
            Gets or sets the host machine user name where the connection is connected to.
            </summary>
            <remarks>
            This property corresponds to the 'Host User' connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.HostPassword">
            <summary>
            Gets or sets the host machine password where the connection is connected to.
            </summary>
            <remarks>
            This property corresponds to the 'Host Password' connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.NewPassword">
            <summary>
            Gets or sets the new password to be used by the SuiteAnalyticsConnect password change mechanism.
            </summary>
            <remarks>
            This property corresponds to the 'New Password' connection string 
            option.
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.HostNameInCertificate">
            <summary>
            Defines the host name in the certificate used as part of the SSL Server Certificate validation 
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.LoadBalanceTimeout">
            <summary>
            Gets or sets the number of seconds to keep connections in a 
            connection pool. The Min Pool Size property 
            can cause some connections to ignore this value.
            </summary>
            <remarks><para>This property corresponds to the Load Balance Timeout connection string option. </para>
            <para>The value can be any integer from 0 to 65535. 
            When set to 0 (the initial default), the connections have the maximum timeout.</para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.LoadBalancing">
            <summary>
            Gets or sets a Boolean value that determines whether the data provider uses client load balancing 
            in its attempts to connect to primary and alternate database servers. 
            The list of alternate servers is specified by the AlternateServers property. 
            <para>When set to True, the data provider attempts to connect to the 
            database servers in random order. </para> 
            <para>When set to False (the initial default), client load balancing 
            is not used and the data provider connects to each server based on its sequential order (primary server first, 
            then, alternate servers in the order they are specified). </para>
            </summary>
            <remarks><para>This property corresponds to the Load Balancing connection string option.</para>
            <para>NOTE: This property has no effect unless alternate servers are 
            defined for Alternate Servers. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.MaxPoolSize">
             <summary>
             Gets or sets the maximum number of connections within a single pool. When the maximum number is reached, no additional connections can be added to the connection pool. 
             The value can be any integer from 1 to 65535. 
             </summary>
             <remarks><para>This property corresponds to the Max Pool Size connection string 
             option.</para>
             <para>The initial default is 100. </para>
             </remarks>
            
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.MinPoolSize">
            <summary>
            Gets or sets the minimum number of connections are opened and 
            placed in a connection pool when it is created. The connection 
            pool retains this number of connections, even when some 
            connections have exceeded their Connection Lifetime value.
            </summary>
            <remarks><para>This property corresponds to the Min Pool Size connection string 
            option.</para>
            <para>The value can be any integer from 0 to 65535. </para>
            
            <para>When set to 0 (the initial default), no additional connections are placed in the connection pool when it is created. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Password">
            <summary>
            Gets or sets a case-insensitive password used to connect to your 
            SuiteAnalyticsConnect database.
            </summary>
            <remarks>This property corresponds to the Password connection string option.</remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            Gets or sets a Boolean value that specifies whether to display secure information in clear text 
            in the ConnectionString property of the Connection object. 
            
            </summary>
            <remarks>This property corresponds to the Persist Security Info 
            connection string option.
            <para>When set to true, the value of the Password connection string 
            option is displayed in clear text. </para>
            <para>When set to false (the initial default), the data provider 
            does not display secure information in clear text.</para></remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Pooling">
            <summary>
            Gets or sets a Boolean value that specifies whether connections are pooled. 
            </summary>
            <remarks><para>This property corresponds to the Pooling connection string option.</para>
            <para>When set to true (the initial default), 
            connection pooling is enabled. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.Port">
            <summary>
            Gets or sets the TCP port of the SuiteAnalyticsConnect listener running on 
            the SuiteAnalyticsConnect database. 
            </summary>
            <remarks><para>This property corresponds to the Port connection string option.</para>
            <para>The initial default is 1521.</para> 
            <para>Do not combine Data Source with Host, Port, Server Type, 
            Service Name, Alternate Servers, or SID in a connection string. 
            Supplying multiple terms for the SuiteAnalyticsConnect server causes 
            the data provider to throw an exception.</para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.SchemaCollectionTimeout">
            <summary>
            Gets or sets the number of seconds after which the attempted 
            schema collection operation to the SuiteAnalyticsConnect server will fail if not yet completed. 
            </summary>
            <remarks>This property corresponds to the Schema Collection Timeout connection string 
            option.
            <para>When set to 0, the data provider never times out on a schema collection operation attempt. 
            The initial default is 120 seconds. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ServerDataSource">
            <summary>
            Gets or sets a net service name in the tnsnames.ora file. 
            If the TNSNames File connection string option is not specified,
            the path is taken from the SuiteAnalyticsConnect section of the Registry. 
            
            </summary>
            <remarks><para>This property corresponds to the Data Source connection string option.</para>
            <para>The initial default is an empty string. </para>
            </remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.TCPNoDelay">
            <summary>
            Specifies the TCP_NO_DELAY Socket property which reduces network traffic by causing the socket to
            buffer packets
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.TraceFile">
            <summary>
            <para>Gets or sets the path and name of the trace file.</para>
            <para>The initial default is \OpenAccessTrace.txt. 
            If the trace file does not exist, the data provider creates it.</para>
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.EncryptionMethod">
            <summary>
            Indicates whether the connection is SSL encrypted or not. 
            Set 1 for SSL Connections.
            </summary>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.UserID">
            <summary>
            Gets or sets the default user name used to connect to your SuiteAnalyticsConnect 
            database.
            </summary>
            <remarks>This property corresponds to the User ID connection string option.</remarks>
        </member>
        <member name="P:NetSuite.SuiteAnalyticsConnect.OpenAccessConnectionStringBuilder.ValidateServerCertificate">
            <summary>
            Specifies whether the server certificate is verified as valid according to a Certificate Authority.
            </summary>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor">
            <summary>
            Constructor, default BigInteger is 0
            </summary>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value provided by long</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value provided by ulong</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(DDInt.Utility.BigInteger)">
            <summary>
            Constructor
            </summary>
            <param name="bi">Initial value provided by another BigInteger</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.String,System.Int32)">
             <summary>
             Constructor
             </summary>
             <param name="value">string containing initial value in the specified base</param>
             <param name="radix">base used by string representation</param>
             <example>
             Example (base 10)
             -----------------
             To initialize "a" with the default value of 1234 in base 10
                  BigInteger a = new BigInteger("1234", 10)
            
             To initialize "a" with the default value of -1234
                  BigInteger a = new BigInteger("-1234", 10)
            
             Example (base 16)
             -----------------
             To initialize "a" with the default value of 0x1D4F in base 16
                  BigInteger a = new BigInteger("1D4F", 16)
            
             To initialize "a" with the default value of -0x1D4F
                  BigInteger a = new BigInteger("-1D4F", 16)
             </example>
             <remarks>
             Note that string values are specified in the (sign)(magnitude) format.
             </remarks>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.Byte[])">
             <summary>
             Constructor
             </summary>
             <param name="inData">Initial value provided by byte[]</param>
             <remarks>
             The lowest index of the input byte array (i.e [0]) should contain the
             most significant byte of the number, and the highest index should
             contain the least significant byte.
            
             Note that this method of initialization does not allow the
             sign to be specified.
             </remarks>
             <example>
             To initialize "a" with the default value of 0x1D4F in base 16
                  byte[] temp = { 0x1D, 0x4F };
                  BigInteger a = new BigInteger(temp)
             </example>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="inData">Initial value provided by byte[]</param>
            <param name="inLen">Length to use from the given byte[]</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.#ctor(System.UInt32[])">
            <summary>
            Constructor
            </summary>
            <param name="inData">Initial value provided by uint[]</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Implicit(System.Int64)~DDInt.Utility.BigInteger">
            <summary>
            Overloading of the typecast operator.
            </summary>
            <param name="value">initial value</param>
            <returns>BigInteger result</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Implicit(System.UInt64)~DDInt.Utility.BigInteger">
            <summary>
            Overloading of the typecast operator.
            </summary>
            <param name="value">initial value</param>
            <returns>BigInteger result</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Implicit(System.Int32)~DDInt.Utility.BigInteger">
            <summary>
            Overloading of the typecast operator.
            </summary>
            <param name="value">initial value</param>
            <returns>BigInteger result</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Implicit(System.UInt32)~DDInt.Utility.BigInteger">
            <summary>
            Overloading of the typecast operator.
            </summary>
            <param name="value">initial value</param>
            <returns>BigInteger result</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Addition(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of addition operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger result</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Increment(DDInt.Utility.BigInteger)">
            <summary>
            Overloading of the unary ++ operator
            </summary>
            <param name="bi1">BigInteger operand</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Subtraction(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of subtraction operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Decrement(DDInt.Utility.BigInteger)">
            <summary>
            Overloading of the unary -- operator
            </summary>
            <param name="bi1">BigInteger operand</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Multiply(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of multiplication operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Utility.BigInteger.op_LeftShift(DDInt.Utility.BigInteger,System.Int32)" -->
        <member name="M:DDInt.Utility.BigInteger.shiftLeft(System.UInt32[],System.Int32)">
            <summary>
            private auxilliary function
            </summary>
            <param name="buffer"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_RightShift(DDInt.Utility.BigInteger,System.Int32)">
            <summary>
            Overloading of unary >> operators
            </summary>
            <param name="bi1">BigInteger operand</param>
            <param name="shiftVal">number of places to shift</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.shiftRight(System.UInt32[],System.Int32)">
            <summary>
            private auxilliary function
            </summary>
            <param name="buffer"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_OnesComplement(DDInt.Utility.BigInteger)">
            <summary>
            Overloading of the NOT operator (1's complement)
            </summary>
            <param name="bi1">BigInteger operand</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_UnaryNegation(DDInt.Utility.BigInteger)">
            <summary>
            Overloading of the NEGATE operator (2's complement)
            </summary>
            <param name="bi1">BigInteger operand</param>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Equality(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
             Overloading of equality operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>bool</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Inequality(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
             Overloading of != operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>bool</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.Equals(System.Object)">
            <summary>
             Overloading of Equals operator
            </summary>
            <param name="bi">BigInteger operand</param>
            <returns>bool</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.GetHashCode">
            <summary>
             Overloading of GetHashCode method
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_GreaterThan(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of > operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>bool</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Utility.BigInteger.op_LessThan(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)" -->
        <member name="M:DDInt.Utility.BigInteger.op_GreaterThanOrEqual(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of >= operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>bool</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Utility.BigInteger.op_LessThanOrEqual(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)" -->
        <member name="M:DDInt.Utility.BigInteger.multiByteDivide(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger,DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Auxilliary function that supports the division of two numbers with
            a divisor that has more than 1 digit.
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <param name="outQuotient">BigInteger resulting quotient</param>
            <param name="outRemainder">BigInteger remainder</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.singleByteDivide(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger,DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Auxilliary function that supports the division of two numbers with
            a divisor that has only 1 digit.
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <param name="outQuotient">BigInteger resulting quotient</param>
            <param name="outRemainder">BigInteger remainder</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Division(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of division operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_Modulus(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of modulus operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_BitwiseAnd(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of bitwise AND operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_BitwiseOr(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of bitwise OR operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.op_ExclusiveOr(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Overloading of bitwise XOR operator
            </summary>
            <param name="bi1">first BigInteger operand</param>
            <param name="bi2">second BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.max(DDInt.Utility.BigInteger)">
            <summary>
            Returns max(this, bi)
            </summary>
            <param name="bi">BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.min(DDInt.Utility.BigInteger)">
            <summary>
            Returns min(this, bi)
            </summary>
            <param name="bi">BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.abs">
            <summary>
            Returns the absolute value
            </summary>
            <param name="bi">BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.ToString">
            <summary>
            Returns a string representing the BigInteger in base 10.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.ToString(System.Int32)">
            <summary>
            Returns a string representing the BigInteger in sign-and-magnitude
            format in the specified radix.
            </summary>
            <param name="radix">base used for the representation</param>
            <returns>string</returns>
            <example>
            If the value of BigInteger is -255 in base 10, then
            ToString(16) returns "-FF"
            </example>
        </member>
        <member name="M:DDInt.Utility.BigInteger.ToHexString">
             <summary>
             Returns a hex string showing the contents of the BigInteger
             </summary>
             <returns>string</returns>
             <example>
             1) If the value of BigInteger is 255 in base 10, then
                ToHexString() returns "FF"
            
             2) If the value of BigInteger is -255 in base 10, then
                ToHexString() returns ".....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01",
                which is the 2's complement representation of -255.
             </example>
        </member>
        <member name="M:DDInt.Utility.BigInteger.modPow(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)">
            <summary>
            Modulo Exponentiation
            </summary>
            <param name="exp">BigInteger exponent</param>
            <param name="n">BigInteger power</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.Pow(DDInt.Utility.BigInteger)">
            <summary>
            Exponentiation
            </summary>
            <param name="exp">BigInteger exponent</param>
            <returns>BigInteger</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Utility.BigInteger.BarrettReduction(DDInt.Utility.BigInteger,DDInt.Utility.BigInteger,DDInt.Utility.BigInteger)" -->
        <member name="M:DDInt.Utility.BigInteger.gcd(DDInt.Utility.BigInteger)">
            <summary>
            Returns gcd(this, bi)
            </summary>
            <param name="bi">BigInteger operand</param>
            <returns>BigInteger</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.genRandomBits(System.Int32,System.Random)">
            <summary>
            Populates "this" with the specified amount of random bits
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.bitCount">
             <summary>
             Returns the position of the most significant bit in the BigInteger.
             </summary>
             <returns>int position</returns>
             <example>
             The result is 0, if the value of BigInteger is 0...0000 0000
             The result is 1, if the value of BigInteger is 0...0000 0001
             The result is 2, if the value of BigInteger is 0...0000 0010
             The result is 2, if the value of BigInteger is 0...0000 0011
            </example>
        </member>
        <member name="M:DDInt.Utility.BigInteger.IntValue">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an int.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.LongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.getBytes">
            <summary>
            Returns the value of the BigInteger as a byte array.  The lowest
            index contains the MSB.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:DDInt.Utility.BigInteger.setBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 1
            The Least Significant Bit position is 0.
            </summary>
            <param name="bitNum">bitnummer to set</param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.unsetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 0
            The Least Significant Bit position is 0.
            </summary>
            <param name="bitNum">bitnummer to unset</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Utility.BigInteger.sqrt" -->
        <member name="M:DDInt.Utility.BigInteger.RSATest(System.Int32)">
            <summary>
            Tests the correct implementation of the modulo exponential function
            using RSA encryption and decryption (using pre-computed encryption and
            decryption keys).
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.RSATest2(System.Int32)">
            <summary>
            Tests the correct implementation of the modulo exponential and
            inverse modulo functions using RSA encryption and decryption.  The two
            pseudoprimes p and q are fixed, but the two RSA keys are generated
            for each round of testing.
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:DDInt.Utility.BigInteger.SqrtTest(System.Int32)">
            <summary>
            Tests the correct implementation of sqrt() method.
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="T:DDInt.Utility.UtilBufferedDataConsumer">
            <summary>
            Summary description for UtilBufferedDataConsumer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilDataConsumer" -->
        <member name="M:DDInt.Utility.UtilDataConsumer.putByte(System.Byte)">
            Method which accepts and "consumes" a single byte; exactly
            what is done with the byte is specific to the class which
            implements this (UtilDataConsumer) interface.
        </member>
        <member name="M:DDInt.Utility.UtilDataConsumer.putArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
            Method which accepts and "consumes" a series of bytes; exactly
            what is done with the bytes is specific to the class which
            implements this (UtilDataConsumer) interface.
        </member>
        <member name="M:DDInt.Utility.UtilDataConsumer.send">
            Method which takes the consumed data (specified "putBytes" 
            and "putArrayOfBytes") and sends it to some destination.
            For some classes which implement the UtilDataConsumer interface,
            this method won't do much.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.END_OF_BUFFER">
             A constant which a caller can pass to "setPosition" to set 
             the current insertion point back to the end of the buffered
             data.
            
             Once "setPosition" is called with this value, subsequent calls 
             to "put" methods will append data to the end of the used portion 
             of "buffer".
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.buffer">
            This buffer contains the data written to this class via its 
            "put" methods. 
            
            The "send" method takes data from this buffer and transfers it to 
            the underlying UtilDataConsumer object.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.currentBufferInsertPosition">
             Indicates the position (in "buffer") at which the 
             next byte will be placed. 
            
             This field contains a zero-based index into "buffer".
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.numBytesPlacedInBuffer">
             Indicates the number of bytes which have been placed 
             (by calls to "put" methods) into "buffer".
            
             This field should not to be confused with the size of "buffer". 
             If the "setPosition" method is called, this field may contain 
             a value different from "currentBufferInsertPosition".
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.bufferSizeIncrement">
             Indicates the size (in bytes) by which "buffer" will be expanded.
            
             The number of bytes in "buffer" will always be a multiple of
             the value in this field.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.printDebugInfo">
            Indicates whether debugging information should be printed.  
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.debugOutputStream">
            Used only for printing of debug information, contains the
            output stream for file containing debug information
            (c:\UtilBufferedDataConsumer.out). 
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataConsumer.dataConsumerObject">
            An object which implements the UtilDataConsumer interface;
            the recipient (at "send" time) of data cached in this class.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.getPosition">
             This method allows the user to obtain the current 
             insertion point within the contained buffer.
            
             This method, coupled with "setPosition", allows the user to 
             change data which was previously written to "buffer".
            
             @return The current insertion point in the internal buffer.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.setPosition(System.Int32)">
             This method allows the user to change the current insertion 
             point within the contained buffer.
            
             This method, coupled with "getPosition", allows the user to 
             change data which was previously written to "buffer".
             If the specified position is less than zero, the current insertion 
             point is set to the first byte of "buffer". 
             If the specified position is END_OF_BUFFER, the current insertion 
             point is set to just beyond the last byte written to "buffer".
            
             @param position Specifies the position in the internal buffer to 
             which the current insertion point should be set.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.enableDebugInfo">
             Method to enable the printing of debugging information.
            
             All debugging info is printed to the 
             c:\UtilBufferedDataConsumer.out 
            
             @exception java.io.IOException  If an I/O error occurs when 
             creating the debug output file or its associated streams. 
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.disableDebugInfo">
            Method to disable the printing of debugging information. 
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.clearBuffer">
             Clears the contents of the "buffer" field.
            
             Calling this method causes all data previously written to 
             "buffer" to be discarded.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.setBufferIncrementSize(System.Int32)">
             Allows the user to specify the block size by which 
             "buffer" will be increased.
            
             @param buffSizeIncrement Indicates the block size (in bytes)
             by which the internal buffer should be expanded.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.assureBufferSpace(System.Int32)">
             Ensures that "buffer" is large enough to accomodate the 
             specified number of bytes. 
            
             If the current buffer is not sufficiently large, a larger buffer 
             is allocated and the data is copied to the new buffer.
            
             @param numBytes Indicates the number of free bytes 
             needed in the internal buffer.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.putByte(System.Byte)">
             Places a single byte into the internal buffer, at the 
             position indicated by "currentBufferInsertPosition".
            
             @param b The byte to be added to the request. 
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.putArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Places a series of bytes into the internal buffer, at the 
             position indicated by "currentBufferInsertPosition".
            
             @param b The array of bytes to be added to the request. 
            
             @param offset The index in the byte array which indicates
             the starting point of the data to be placed in the internal 
             buffer.
            
             @param len The number of bytes to be taken from "b" and
             added to the request. 
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataConsumer.send">
             This method takes the data which has been 
             written to "buffer" and transfers it to the underlying
             UtilDataConsumer object.
            
             If the printing of debugging information has been enabled, this 
             method prints the buffer contents.
        </member>
        <member name="T:DDInt.Utility.UtilBufferedDataProvider">
            <summary>
            Summary description for UtilBufferedDataProvider.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilDataProvider" -->
        <member name="M:DDInt.Utility.UtilDataProvider.getByte">
             Method which obtains and returns a single byte; exactly
             how the byte is obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @return The single byte which was read.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilDataProvider.getArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Method which obtains and returns a group of bytes; exactly
             how the bytes are obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @param b The byte array into which the requested data should
             be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The maximum number of bytes to read and place in "b".
            
             @return The number of bytes read and placed into "b". Note that
             this may be fewer than the number requested (if the requested 
             number are not available). In this case, "getArrayOfBytes" should 
             NOT throw a NO_MORE_DATA_TO_READ UtilException.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilDataProvider.empty">
             Method which reads ALL data which is currently available and
             discards it.
            
             @exception UtilException If some error occurs while reading/discarding
             all available data.
        </member>
        <member name="M:DDInt.Utility.UtilDataProvider.receive">
             Method which retrieves data from some source, making it available
             for return by the "get" methods.
            
             For some classes which implement the UtilDataProvider interface,
             this method won't do much.
            
             @exception UtilException If some error occurs while retrieving the
             data and making it available for reading.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.blockSizeForRead">
            The number of bytes to attempt to read on each call
            to the underlying UtilDataProvider object.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.buffer">
            This buffer contains the most recent block of data read (by
            the "cacheNextBlock" method) from the underlying 
            UtilDataProvider object.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.numBytesReturnedFromBuffer">
             Indicates the number of bytes which have been returned (by
             "getByte" and "getArrayOfBytes") from "buffer" since the last 
             call to "cacheNextBlock".
            
             This field should not to be confused with the actual size 
             of "buffer". 
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.numBytesInBuffer">
             Indicates the total number of meaningful bytes in "buffer". The value
             of this field is always greater than or equal to the value of
             "numBytesReturnedFromBuffer".
            
             This field should not to be confused with the actual size 
             of "buffer". 
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.dataProviderObject">
            An object which implements the UtilDataProvider interface;
            the provider of the data which is cached by this class.
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.cacheMoreData">
             Enables or disables the process of obtaining more data from
             the underlying UtilDataProvider object. If you only intend
             to read the cached data alrealy in the DataProvider, you 
             need to set the field "cacheMoreData" to false. 
             This field is always default.
            
             "cacheMoreData". (see cacheAdditionalData())
            
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataProvider.lastNumBytesWriten">
             Indicates the total number of bytes read into the receiver's "buffer".
             The value of this field is always less than or equal to the receiver's
             buffer size.
            
             "lastNumBytesWriten".
            
             This field should not to be confused with the actual size 
             of receiver's "buffer". 
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.cacheNextBlock">
             This method reads the specified number of bytes from the
             underlying UtilDataProvider object and populates "buffer"
             with the bytes obtained.
            
             @param numBytesToCache The number of bytes to read from the
             underlying UtilDataProvider object and cache in "buffer".
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.getByte">
             Returns a single byte from the internal buffer. If all bytes
             have already been returned from the buffer, then the private
             "cacheNextBlock" method is called to obtain more data. The 
             requested byte is then returned from the new cache.
            
             @return  The byte read from the buffer. 
            
             @exception UtilException If the underlying UtilDataProvider
             throws an exception.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.getArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Returns a series of bytes from the internal buffer.
             Note: if the caller requests more bytes than remain
             in "buffer", then this method will call "cacheNextBlock"
             (as necessary) to repopulate the cache.
            
             @param b The byte array into which the requested data should
             be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The maximum number of bytes to read and place in "b".
            
             @return The number of bytes read and placed into "b". 
            
             @exception UtilException If the underlying UtilDataProvider
             throws an exception.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.empty">
            This method marks the internal buffer as empty and tells the
            underlying UtilDataProvider object to perform an "empty".
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.receive">
            This method simply tells the underlying UtilDataProvider object 
            to perform a "receive".
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.cacheAdditionalData(System.Boolean)">
            This method simply tells the underlying UtilDataProvider object 
            to cache more data into the buffer.
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataProvider.isCacheEmpty">
             This method returns a boolean indicating whether the internal cache
             is empty
            
             @return boolean, true means that cache is empty
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.footprint">
            <summary>
             Footprint information field.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.MAX_BUFFER_SIZE">
            <summary>
             The maximum size, in bytes, of the virtual buffer being maintained.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.buffer">
            <summary>
             Used to actually hold the data maintained by this class.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.currentPos">
            <summary>
             The 0-based position of the next byte to be returned by a call to
             the "read" method. This is an offset into the "buffer" field.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.endOfDataPos">
            <summary>
             The 0-based position of the last byte of actual data.
             This is an offset into the "buffer" field.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilBufferedDataQueue.isEmpty">
            <summary>
             Flag indicating whether the virutal buffer is empty. This is true if
             either no data been placed into the buffer or all data placed into the
             buffer has been returned by the "read" method.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.numBufferedBytes">
            <summary>
             This method returns the number of bytes currently in the queue.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.bufferAllData(DDInt.Utility.UtilDataProvider)">
            <summary>
             This method obtains data from the specified UtilDataProvider object
             and populates the virtual buffer with it.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             This method takes the contents of the specified buffer
             and populates the virtual buffer with it.
            </summary>
            <returns>The number of bytes written into the virtual buffer. This value
            	will be less than the specified length if the buffer became full before
            	all of the specified data could be placed into it.
            </returns>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.read(System.Byte[],System.Int32,System.Int32)">
            <summary>
             This method populates the specified byte array with data from
             the virtual buffer.
            </summary>
            <returns>The number of bytes actually returned.
            </returns>
        </member>
        <member name="M:DDInt.Utility.UtilBufferedDataQueue.empty">
            <summary>
             This method resets the virtual buffer to an empty state.
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilByteArrayDataProvider">
            <summary>
            Summary description for UtilByteArrayDataProvider.
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilByteArrayDataProvider.byteArray">
            Byte array of input data
        </member>
        <member name="F:DDInt.Utility.UtilByteArrayDataProvider.readPosition">
            The 0-based location in the buffer for next read
        </member>
        <member name="F:DDInt.Utility.UtilByteArrayDataProvider.length">
            The total number bytes of input data
        </member>
        <member name="F:DDInt.Utility.UtilByteArrayDataProvider.provider">
            The depacketizer which provides input data
        </member>
        <member name="F:DDInt.Utility.UtilByteArrayDataProvider.tempBuffer">
            Used to store the entire reply from the server.  A temp buffer is
            employed since it could be quite large.
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.#ctor(System.Byte[],System.Int32)">
             Primary constructor.
            
             @param byteArray A array of bytes that represents input data
             @param length Number of bytes of data
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.#ctor(System.Byte[])">
             Primary constructor.
            
             @param byteArray A array of bytes that represents input data
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.#ctor(DDInt.Utility.UtilDataProvider,DDInt.Utility.UtilPagedTempBuffer,System.Int32)">
             Primary constructor.
            
             @param provider An UtilDataProvider that provides input data
             @param tempBuf  A populated UtilPagedTempBuffer
             @param length   Length of bytes already written in tempBuffer
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.#ctor(DDInt.Utility.UtilDataProvider)">
             Primary constructor.
            
             @param provider An UtilDataProvider that provides input data
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.getByte">
             Method which obtains and returns a single byte; exactly
             how the byte is obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @return The single byte which was read.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.getArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Method which obtains and returns a group of bytes; exactly
             how the bytes are obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @param b The byte array into which the requested data should
             be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The maximum number of bytes to read and place in "b".
            
             @return The number of bytes read and placed into "b". Note that
             this may be fewer than the number requested (if the requested
             number are not available). In this case, "getArrayOfBytes" should
             NOT throw a NO_MORE_DATA_TO_READ UtilException.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.empty">
             Method which reads ALL data which is currently available and
             discards it.
            
             @exception UtilException If some error occurs while reading/discarding
             all available data.
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.receive">
             Method which retrieves data from some source, making it available
             for return by the "get" methods.
            
             When a provider is specified, receive all avaiable data the provider
             can provide and put them in the "tempBuffer". If no provider is
             specified, this method does nothing.
            
             @exception UtilException If some error occurs while retrieving the
             data and making it available for reading.
        </member>
        <member name="M:DDInt.Utility.UtilByteArrayDataProvider.resetByteArray(System.Int32)">
            Method which resets the byteArray's position and length enabling us to
            reuse the current byte array
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilByteOrderedDataReader" -->
        <member name="F:DDInt.Utility.UtilByteOrderedDataReader.dataProviderObject">
            The object from which data bytes will be received (by the "read" 
            methods).
        </member>
        <member name="F:DDInt.Utility.UtilByteOrderedDataReader.staticByteArray">
            A byte array used to contain data read from the underlying
            UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readInt8">
             Reads and returns a single byte from the underlying
             UtilDataProvider object.
            
             @return The value of the single byte read from the underlying
             UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readUInt8">
             Reads and returns a single byte from the underlying
             UtilDataProvider object and returns its value as an int.
            
             @return The integer value which represents the byte 
             as an unsigned value.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readInt16">
             Reads two bytes from the underlying UtilDataProvider object, 
             and returns them as a short.
            
             The way in which the bytes are interpreted is determined by 
             the value of the "encodeInBigEndian" field.
            
             @return The short value representing the two bytes read  
             from the UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readUInt16">
             Reads two bytes from the underlying UtilDataProvider object, 
             and returns them as an int.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "encodeInBigEndian" field. 
            
             @return The integer value which represents the two bytes 
             (read from the UtilDataProvider object) as an unsigned value.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readInt32">
             Reads four bytes from the underlying UtilDataProvider object, 
             and returns them as an int.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "interpretAsBigEndian" field. 
            
             @return The integer value represented by the four bytes read from 
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readUInt32">
             Reads four bytes from the underlying UtilDataProvider object
             and returns them as a long.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "interpretAsBigEndian" field. 
            
             @return The long value which represents the four bytes (read from 
             the underlying UtilDataProvider object) as an unsigned value.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readIEEE32BitFloat">
             Reads four bytes from the underlying UtilDataProvider object, 
             and returns them as a four-byte (IEEE 754 format) float.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "interpretAsBigEndian" field.  
            
             @return The float value represented by the four bytes read from 
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readInt64">
             Reads eight bytes from the underlying UtilDataProvider object, 
             and returns them as a long.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "interpretAsBigEndian" field.
            
             @return The long value represented by the eight bytes read from 
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readIEEE64BitDouble">
             Reads eight bytes from the underlying UtilDataProvider object, 
             and returns them as an eight-byte (IEEE 754 format) double.
            
             The way in which the bytes are interpreted is determined by the 
             value of the "interpretAsBigEndian" field. 
            
             @return The double value represented by the eight bytes read from 
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readString(System.Int32)">
             Reads a number of bytes from the underlying UtilDataProvider object
             and encodes these into a String, according to the encoding
             currently set.
            
             @param nrOfBytes The number of bytes (to read from
             the underlying UtilDataProvider object) which make up the
             String to be returned.
            
             @return The String representation of the bytes read from
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readUCS2String8">
             Reads a 1 or 2-byte length indicator, followed by a UCS2 string 
             (of this length) from the underlying UtilDataProvider object.
            
             The way in which the bytes are interpreted is determined 
             by the value of the "interpretAsBigEndian" field. 
            
             @return The String representation of the bytes read from 
             the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readBytes(System.Byte[],System.Int32,System.Int32)">
             Reads the specified number of bytes from the underlying 
             UtilDataProvider object and places them into the specified 
             byte buffer.
            
             @param byteArray The array into which the bytes (read 
             from the underlying UtilDataProvider object) should be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The size of the specified byte array.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.readAndDiscardBytes(System.Int32)">
             Reads the specified number of bytes from the 
             underlying UtilDataProvider object and discards them. 
             
             @param numBytesToSkip The number of bytes to be read and discarded.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.receive">
             This method instructs the consuming UtilDataProvider object to 
             perform a receive operation. For some classes which implement 
             the UtilDataProvider interface, the "receive" method won't do 
             much.
            
             This method should be called prior to performing any read
             operations.
            
             @exception UtilException If an error occurs when 
             reading from the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataReader.empty">
             This method instructs the consuming UtilDataProvider object to 
             perform an "empty" operation. For some classes which implement 
             the UtilDataProvider interface, the "empty" method won't do 
             much.
            
             @exception UtilException If an error occurs when 
             performing the "empty" on the UtilDataProvider object.
        </member>
        <member name="P:DDInt.Utility.UtilByteOrderedDataReader.interpretAsBigEndian">
             A boolean flag indicating whether the data read
             from the underlying UtilDataProvider should be interpreted
             in "big endian" (true) or "little endian" (false) format.
            
             Big endian (also referred to as "network order") means that the
             most significant byte appears first, while the least significant
             byte appears last.
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilByteOrderedDataWriter" -->
        <member name="F:DDInt.Utility.UtilByteOrderedDataWriter.dataConsumerObject">
            The object to which data will be sent (by the "write" methods)
            after the bytes are properly sequenced.
        </member>
        <member name="F:DDInt.Utility.UtilByteOrderedDataWriter.staticByteArray">
            A byte array used to contain data which is subsequently
            written to the underlying UtilDataConsumer object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.#ctor(DDInt.Utility.UtilDataConsumer)">
             Primary constructor, allowing specification of an object
             which implements the UtilDataConsumer interface. This object
             will be the "recipient" of any data specified to this
             class' "write" methods.
            
             @param obj An object which implements the UtilDataConsumer 
             interface; all bytes are "handed off" to this object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeInt8(System.SByte)">
             Sends a single byte to the underlying UtilDataConsumer object.
            
             @param value The value of the byte to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
            
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeUInt16(System.UInt16)">
             Sends a two-byte unsigned integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the two bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The unsigned short value to be written.
            
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeInt16(System.Int16)">
             Sends a two-byte integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the two bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The integer value to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeUInt32(System.UInt32)">
             Sends a four-byte unsigned integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the four bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The unsigned integer value to be written.
            
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeInt32(System.Int32)">
             Sends a four-byte integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the four bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The integer value to be written.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeIEEE32BitFloat(System.Single)">
             Sends a four-byte (IEEE 754 format) float value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the four bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The float value to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeUInt64(System.UInt64)">
             Sends an eight-byte unsigned integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the eight bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The unsinged long value to be written.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeInt64(System.Int64)">
             Sends an eight-byte integer value to the underlying 
             UtilDataConsumer object.
            
             The sequence of the eight bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The long value to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeIEEE64BitDouble(System.Double)">
             Sends an eight-byte (IEEE 754 format) double value to the 
             underlying UtilDataConsumer object.
            
             The sequence of the eight bytes is determined by the value of the
             "encodeInBigEndian" field. 
            
             @param value The double value to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeString(System.String)">
             Encodes a String into a sequence of bytes according to the encoding in place,
             and writes it into the underlying UtilDataConsumer object.
            
             @param str The String to be written.
            
             @return The number of bytes written.
            
             @exception UtilException If an error occurs when
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeStringWithLength8(System.String)">
             Encodes a String into a sequence of bytes according to the encoding in place,
             and writes it into the underlying UtilDataConsumer object;
             this sequence of bytes is preceded with an 8bit length field.
            
             @param str The String to be written.
            
             @return The number of bytes written, including the length field.
            
             @exception UtilException If an error occurs when
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeStringWithLength16(System.String)">
             Encodes a String into a sequence of bytes according to the encoding in place,
             and writes it into the underlying UtilDataConsumer object;
             this sequence of bytes is preceded with an 8bit length field.
            
             @param str The String to be written.
            
             @return The number of bytes written, including the length field.
            
             @exception UtilException If an error occurs when
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeStringWithLength32(System.String)">
             Encodes a String into a sequence of bytes according to the encoding in place,
             and writes it into the underlying UtilDataConsumer object;
             this sequence of bytes is preceded with an 8bit length field.
            
             @param str The String to be written.
            
             @return The number of bytes written, including the length field.
            
             @exception UtilException If an error occurs when
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeBytes(System.Byte[])">
             Sends a series of bytes to the underlying UtilDataConsumer object.
            
             The bytes are copied verbatim. 
            
             @param b The array of bytes to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeBytes(System.Byte[],System.Int32,System.Int32)">
             Sends a series of bytes to the underlying UtilDataConsumer object.
            
             The bytes are copied verbatim. 
            
             @param b The array of bytes to be sent to 
             the underlying UtilDataProvider object.
            
             @param offset The index in the byte array which indicates
             the starting point of the data to sent to the underlying 
             UtilDataProvider object.
            
             @param len The number of bytes to be taken from "b" and
             sent to the underlying UtilDataProvider object.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.writeFillerBytes(System.Byte,System.Int32)">
             Sends the specified number of bytes to the
             underlying UtilDataConsumer object; each byte has 
             the value specified by the caller.
            
             @param b The value of each byte to be written.
            
             @param numBytesToAdd The number of bytes to be written.
            
             @exception UtilException If an error occurs when 
             writing to the UtilDataProvider object.
        </member>
        <member name="M:DDInt.Utility.UtilByteOrderedDataWriter.send">
             This method instructs the consuming UtilDataConsumer object to 
             perform a send operation. For some classes which implement 
             the UtilDataConsumer interface, the "send" method won't do much.
            
             @exception UtilException If an error occurs when 
             telling the underlying UtilDataProvider object to send.
        </member>
        <member name="P:DDInt.Utility.UtilByteOrderedDataWriter.encodeInBigEndian">
             A boolean flag indicating whether the data read
             from the underlying UtilDataProvider should be interpreted
             in "big endian" (true) or "little endian" (false) format.
            
             Big endian (also referred to as "network order") means that the
             most significant byte appears first, while the least significant
             byte appears last.
        </member>
        <member name="T:DDInt.Utility.UtilDataConversions">
            <summary>
            Summary description for UtilDataConversions.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilDataConversions.byteToHex(System.Byte)">
             Used to convert a single byte into a string which contains
             its hexadecimal representation.
            
             @param b The value of the byte whose hexadecimal representation is to
             be constructed.
        </member>
        <member name="M:DDInt.Utility.UtilDataConversions.ASCIIBytesToString(System.Byte[],System.Int32)">
             This method accepts a byte array representing a group of
             ASCII characters. It interprets the bytes as ASCII
             characters (one byte per character) and constructs a string from
             them. For instance, a byte array containing 0x6162 (two bytes)
             returns the string "ab" (two characters).
            
             @param bytes The array which contains the bytes representing
             the ASCII characters.
            
             @param len The number of "relevant" bytes in the array.
        </member>
        <member name="M:DDInt.Utility.UtilDataConversions.bytesToString(System.Byte[],System.Int32)">
             This method accepts a byte array and constructs a string which
             represents the contents of the byte array. For instance, a byte
             array containing 0x6162 (two bytes) is returned as the string
             "6162" (four characters).
            
             @param bytes The array which contains the bytes representing
             the UCS2 characters.
            
             @param len The number of "relevant" bytes in the array.
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilDepacketizingDataProvider" -->
        <member name="F:DDInt.Utility.UtilDepacketizingDataProvider.dataProvider">
            An object which implements the UtilDataProvider interface;
            the object from which data bytes are read.
        </member>
        <member name="F:DDInt.Utility.UtilDepacketizingDataProvider.numBytesReadFromCurrentPacket">
            This field keeps track of the number of bytes which have
            been read (via calls to "getByte" and "getArrayOfBytes")
            from the packet which is currently being read.
        </member>
        <member name="F:DDInt.Utility.UtilDepacketizingDataProvider.noMoreDataToRead">
             This field indicates whether there is more data to be read
             through the "get" methods.
            
             This flag is set to true when the last byte of the last related
             packet header have been read.
            
             This flag can be set back to false only by calling the "receive"
             method.
        </member>
        <member name="F:DDInt.Utility.UtilDepacketizingDataProvider.packetSize">
             This field indicates the number of bytes which make up 
             the current packet.
            
             The packet size can be set with the "setPacketSize" method.
            
             The default value of this field is 1024.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.#ctor(DDInt.Utility.UtilDataProvider)">
             Primary constructor, allowing specification of the 
             UtilDataProvider object.
            
             @param obj A UtilDataProvider object from which 
             data bytes will be read.    
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.setPacketSize(System.Int32)">
            Set accessor for the "packetSize" field.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.signalStartOfPacket">
             Method which is called just before this class starts to
             read a packet's contents.
            
             This implementation does nothing. Classes derived from
             UtilDepacketizingDataProvider should do whatever is necessary
             at the start of a packet. For instance, it may read a
             packet header.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.signalEndOfPacket">
             Method which is called just after this class reads the
             last byte in a packet.
            
             Classes derived from UtilDepacketizingDataProvider should do
             call the base class and then do whatever is necessary
             at the start of a packet. For instance, it may read a
             packet trailer.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.getByte">
             Reads a single byte from the underlying UtilDataProvider object. 
            
             If the byte to be read is the first of the next packet, then the
             "signalStartOfPacket" method is called.  If the byte read was the
             last in the current packet, then then the "signalEndOfPacket" method
             is called.
            
             @return b The byte read from the underlying UtilDataProvider object.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.getArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Reads an array of bytes from the underlying UtilDataProvider object
             and returns them to the caller. 
            
             If the specified number of bytes cannot be read from the current
             packet, then this method reads the remaining bytes from the current
             packet, calls "signalEndOfPacket", calls "signalStartOfPacket", reads
             more data from the next packet, and so on until all the specified
             data is read.
             
             @param b The byte array into which the requested data should
             be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The maximum number of bytes to read and place in "b".
            
             @return The number of bytes read and placed into "b". Note that
             this may be fewer than the number requested (if the requested 
             number are not available). In this case, "getArrayOfBytes" does
             NOT throw a NO_MORE_DATA_TO_READ UtilException.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.empty">
             Method which retrieves the remaining data from some source
             and discards it.
            
             @exception UtilException If some error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilDepacketizingDataProvider.receive">
             This method calls "receive" on the underlying UtilDataProvider object.
            
             The "numBytesReadFromCurrentPacket" field is set back to 0,
             in preparation for reading the packet contents.
            
             @exception UtilException If some error is encountered.
        </member>
        <member name="T:DDInt.Utility.UtilException">
            <summary>
            Summary description for UtilException.
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilPacketizingDataConsumer">
             This utility class implements the UtilDataConsumer interface and
             provides methods to accept data, break it up into packets (the size
             of which is specified by the user of this class) and
             forward the packets to a UtilDataConsumer object.
             This class' constructor requires a UtilBufferedDataConsumer 
             object (to which packets are forwarded) and a packet size.
            
        </member>
        <member name="F:DDInt.Utility.UtilPacketizingDataConsumer.dataConsumerObject">
            An object which implements the UtilDataConsumer interface;
            the object to which data bytes are sent.
        </member>
        <member name="F:DDInt.Utility.UtilPacketizingDataConsumer.numBytesInCurrentPacket">
            This field keeps track of the number of bytes which have
            been added to the packet which is currently under construction.
        </member>
        <member name="F:DDInt.Utility.UtilPacketizingDataConsumer.numPacketsCreatedSinceSend">
            This field indicates the number of packets which have been
            created (and possibly sent) since the last call to "send".
        </member>
        <member name="F:DDInt.Utility.UtilPacketizingDataConsumer.sendPacketWhenFull">
             This boolean flag determines when UtilBufferedDataConsumer.send()
             (underlying UtilDataConsumer) is called. If true, it is called every
             time a packet is full.  If false, it is called at the end of every
             message.
            
             The true setting is best for writing large data values (e.g.,
             blob parameters), since buffering the entire message would be tax
             memory resources.  Otherwise, the false setting is best, as it
             limits the number of writes to the wire.
        </member>
        <member name="F:DDInt.Utility.UtilPacketizingDataConsumer.packetSize">
             This field indicates the number of bytes which make up a packet.
            
             The packet size can be set at construction time, or with the
             "setPacketSize" method.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.#ctor(DDInt.Utility.UtilDataConsumer,System.Int32)">
             Primary constructor, allowing specification of the 
             UtilDataConsumer object to which data bytes will
             be forwarded, plus the desired packet size.
            
             @param obj A UtilDataConsumer object to which 
             data bytes will be forwarded.    
            
             @param packetSizeArg The number of bytes to be included in a
             packet.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.setPacketSize(System.Int32)">
            Method to set the desired packet size after the object is
            constructed.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.setSendPacketWhenFull(System.Boolean)">
            Method to set the value of the "sendPacketWhenFull" field.  See
            field description for details.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.signalStartOfPacket">
             Method which is called at the start of a packet.
            
             This implementation does nothing. Classes derived from
             UtilPacketizingDataConsumer should do whatever is necessary
             at the start of a packet. For instance, it may write a
             packet header.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.signalEndOfPacket(System.Boolean)">
             Method which is called at the end of a packet.
            
             This implementation does nothing. Classes derived from
             UtilPacketizingDataConsumer should do whatever is necessary
             at the end of a packet. For instance, it may write a
             packet trailer, or modify portions of the packet header.
            
             @param signalIsDueToSend If true, indicates that the call to
             "signalEndOfPacket" was made because the user of this class called
             "send" while a packet was partially constructed. If false, then 
             the call to "signalEndOfPacket" was made because the user of this 
             class called one of the "put" methods.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.checkForEndOfPacket">
             This method is called by both "putByte" and "putArrayOfBytes"
             after data has been written into the current packet.
            
             This method determines whether the data has filled up the
             current packet. If it has, it takes the appropriate action.
            
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.putByte(System.Byte)">
             Accepts a single byte and forwards it to the underlying
             UtilDataConsumer object.
            
             If the specified byte is the first of a new packet, then the
             "signalStartOfPacket" method is called.  If the specified byte
             completes the current packet, then the "signalEndOfPacket" method
             is called.
            
             @param b The byte to be included in the packet.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.putArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Accepts an array of bytes and forwards them to the underlying
             UtilDataConsumer.
            
             If the array of bytes cannot fit in the current packet, then this method
             fits as much as it can in the current packet, calls "signalEndOfPacket",
             calls "signalStartOfPacket", puts more data in the next packet, and so
             on until all the specified data is placed in packets.
            
             @param b The array of bytes to be sent to the underlying
             UtilDataConsumer object.
            
             @param offset The index in the byte array which indicates
             the starting point of the data to be sent.
            
             @param len The number of bytes to be taken from "b" and
             sent to the underlying UtilDataConsumer object.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.send">
             This method calls "send" on the underlying UtilDataConsumer object.
            
             If there are bytes left in the current packet, then this method
             calls "signalEndOfPacket" before telling the underlying 
             UtilDataConsumer object to "send".
             
             The "numPacketsCreatedSinceSend" and "numBytesInCurrentPacket" fields
             are set back to 0.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.writeInt8(System.Int32)">
            Writes header byte values directly to the underlying data consumer.
            This avoids the packetizing logic of this.putByte.
        </member>
        <member name="M:DDInt.Utility.UtilPacketizingDataConsumer.writeInt16(System.Int32)">
             Writes header 2-byte integer values directly to the underlying data
             consumer.  This avoids the packetizing logic of this.putByte.
            
             Method assumes big-endian encoded integers header.  If little-endian
             is required, then this method will have to be overridden.
        </member>
        <member name="T:DDInt.Utility.UtilPagedTempBuffer">
            This class maintains a buffer that resides in memory until the size of the
            buffer exceeds a certain threshold.  Once the threshold is exceeded any
            additional data is stored in a temporary disk file
        </member>
        <member name="T:DDInt.Utility.UtilTempBuffer">
            <summary>
            Summary description for UtilTempBuffer.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.write(System.Int32,System.Byte)">
             Writes a single byte of data to the temp buffer
            
             @param offset The offset into the temp buffer of the byte to write
             @param value The byte value to write
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.write(System.Int32,System.Byte[])">
             Writes the entire contents of the buffer supplied to the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @param buffer The buffer containing the bytes to write
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.write(System.Int32,System.Byte[],System.Int32,System.Int32)">
             Writes some or all of the supplied buffer to the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @buffer The buffer containing the bytes to write
             @bufferOffset The offset into buffer from which begin reading from
             @length The number of bytes to read from buffer and write to the temp
             buffer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.write(System.Int32,DDInt.Utility.UtilDataProvider,System.Int32)">
             Reads data from the UtilDataProvider specified and writes that data to
             the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @param dataProvider The UtilDataProvider object from which to read the
             data
             @param length The number of bytes to read from the dataProvider and write
             to the temp buffer
            
             @return the actual number of bytes written to the temp buffer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.write(DDInt.Utility.UtilDataProvider)">
             Reads all of the data from the UtilDataProvider specified and writes
             the data to the temp buffer
            
             @param dataProvider The UtilDataProvider object from which to read the
             data
            
             @return the number of bytes written to the temp buffer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.read(System.Int32)">
             Reads a single byte from the temp buffer
            
             @parameter offset The offset into the temp buffer of the byte to read
            
             @return The value of the byte at location specified by offset
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.read(System.Int32,System.Int32)">
             Reads a set of bytes from the temp buffer
            
             @param offset The offset into the temp buffer to start reading from
             @param length The number of bytes to read
            
             @return A byte array of size length that contains the bytes read
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.read(System.Int32,System.Byte[],System.Int32,System.Int32)">
             Reads a set of bytes from the temp buffer into the buffer
             supplied
            
             @param offset The offset into the temp buffer to start reading from
             @param buffer The buffer that the bytes read are to be written to
             @param bufferOffset The offset into buffer to start writing the bytes to
             @param length The number of bytes to read from the temp buffer and write
             to the buffer supplied buffer
            
             @return The number of bytes written to the supplied buffer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.read(System.Int32,DDInt.Utility.UtilDataConsumer,System.Int32)">
             Reads a set of bytes from the temp buffer and writes them to the
             UtilDataConsumer specified
            
             @param offset The offset into the temp buffer to start reading from
             @param dataConsumer The UtilDataConsumer to write the bytes to
             @param length the number of bytes to read from the temp buffer and write
             to the UtilDataConsumer
            
             @return The number of bytes written to the UtilDataConsumer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.read(DDInt.Utility.UtilDataConsumer)">
             Reads all of the data from the temp buffer and writes it to the
             UtilDataConsumer
            
             @param dataConsumer The UtilDataConsumer to write the bytes to
            
             @return The number of bytes written to the UtilDataConsumer
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.truncate">
            Clears the contents of the temp buffer and sets the buffer size to zero
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.truncate(System.Boolean)">
             Clears the contents of the temp buffer and sets the buffer size to zero
            
             @param reallocBuffer Indicates whether the memory allocated for the the
             buffer should be released.
        </member>
        <member name="M:DDInt.Utility.UtilTempBuffer.getSize">
            Returns the size of the temp buffer in bytes
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.blocks">
            An array that contains the blocks that make up the in memory buffer
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.currentBlockNum">
            This field indicates which block is currently already present.
            This is done to avoid excessive calls to getblock.
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.numAllocatedBlocks">
            This field indicates the number of elements in the above "blocks" array
            which actually reference instances of the UtilTempBufferBlock class
            (as opposed to those which are null references).
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.maxBlocks">
            The maximum number of physical blocks to be contained in the "blocks"
            array.
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.staticByteArray">
            A byte array used to contain data which is subsequently
            read/written from/to the temp buffer.
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.blockSize">
            The size of the in memory buffer blocks
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.blockShift">
            The number of bits to shift the temp buffer offset to get the
            block number
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.tmpFileInfo">
            Filename and path for backing temporary file
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.tmpFile">
            The currently open backing temporary file
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.nextAvail">
            The next available byte in the temp buffer
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.overflowToDisk">
            This field indicates whether this class should utilize the hard
            disk to maintain (overflow for) the temp buffer.
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.hitOutOfMemoryError">
            This field indicates whether an out of memory error has been
            encountered (since object construction or truncate(true)) while
            attempting to allocate a new UtilTempBufferBlock object.
        </member>
        <member name="F:DDInt.Utility.UtilPagedTempBuffer.property">
            The property of the data. Can be used to store anything, encoding, for example.
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.#ctor">
            Creates a new UtilPagedTempBuffer with the default block size and
            number of physical blocks
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.#ctor(System.Int32)">
             Creates a new UtilPagedTempBuffer with the number of physical blocks
             specified by numPhysicalBlocks and the default block size
            
             @param maxMemory 
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.#ctor(System.Int32,System.Int32)">
             Creates a new UtilPagedTempBuffer with the number of physical blocks
             specified by numPhysicalBlocks and the specified block size
            
             @param numPhysicalBlocks The number of physical blocks that will make
             up the in memory data buffer.
             @param blockSize The size of the physical blocks in KBytes
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.setup(System.Int32,System.Int32)">
             Used by each of the constructors, this method initializes the
             various fields in a newly created UtilPagedTempBuffer object.
            
             @param numPhysicalBlocks The number of physical blocks that will make
             up the in-memory data buffer.
            
             @param blockSize The size of the physical blocks in KBytes.
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(System.Int32,System.Byte)">
             Writes a single byte of data to the temp buffer
            
             @param offset The offset into the temp buffer of the byte to write
             @param value The byte value to write
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(System.Int32,System.Byte[])">
             Writes the entire contents of the buffer supplied to the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @param buffer The buffer containing the bytes to write
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(System.Int32,System.Byte[],System.Int32,System.Int32)">
             Writes some or all of the supplied buffer to the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @buffer The buffer containing the bytes to write
             @bufferOffset The offset into buffer from which begin reading from
             @length The number of bytes to read from buffer and write to the temp
             buffer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(System.Int32,DDInt.Utility.UtilDataProvider,System.Int32)">
             Reads data from the UtilDataProvider specified and writes that data to
             the temp buffer
            
             @param offset The offset into the temp buffer to start writing to
             @param dataProvider The UtilDataProvider object from which to read the
             data
             @param length The number of bytes to read from the dataProvider and write
             to the temp buffer
             @return the number of bytes actually written to the temp buffer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(DDInt.Utility.UtilDataProvider)">
             Reads all of the data from the UtilDataProvider specified and writes
             the data to the temp buffer
            
             @param dataProvider The UtilDataProvider object from which to read the
             data
            
             @return the number of bytes written to the temp buffer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.write(System.Int32,DDInt.Utility.UtilDataProvider)">
             Reads all of the data from the UtilDataProvider specified and writes
             the data to the temp buffer
            
             @param dataProvider The UtilDataProvider object from which to read the
             data.
             
             @param offset The offset where to start writing
            
             @return The number of bytes written to the temp buffer.
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.read(System.Int32)">
             Reads a single byte from the temp buffer
            
             @parameter offset The offset into the temp buffer of the byte to read
            
             @return The value of the byte at location specified by offset
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.read(System.Int32,System.Int32)">
             Reads a set of bytes from the temp buffer
            
             @param offset The offset into the temp buffer to start reading from
             @param length The number of bytes to read
            
             @return A byte array of size length that contains the bytes read
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.read(System.Int32,System.Byte[],System.Int32,System.Int32)">
             Reads a set of bytes from the temp buffer into the buffer
             supplied
            
             @param offset The offset into the temp buffer to start reading from
             @param buffer The buffer that the bytes read are to be written to
             @param bufferOffset The offset into buffer to start writing the bytes to
             @param length The number of bytes to read from the temp buffer and write
             to the buffer supplied buffer
            
             @return The number of bytes written to the supplied buffer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.readByte(System.Int32)">
            Returns a byte from the tempBuffer at the specified offset
            
            @param offset
            @return
            @throws UtilException
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.read(System.Int32,DDInt.Utility.UtilDataConsumer,System.Int32)">
             Reads a set of bytes from the temp buffer and writes them to the
             UtilDataConsumer specified
            
             @param offset The offset into the temp buffer to start reading from
             @param dataConsumer The UtilDataConsumer to write the bytes to
             @param length the number of bytes to read from the temp buffer and write
             to the UtilDataConsumer
            
             @return The number of bytes written to the UtilDataConsumer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.read(DDInt.Utility.UtilDataConsumer)">
             Reads all of the data from the temp buffer and writes it to the
             UtilDataConsumer
            
             @param dataConsumer The UtilDataConsumer to write the bytes to
            
             @return The number of bytes written to the UtilDataConsumer
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.truncate">
            Clears the contents of the temp buffer and sets the buffer size to zero
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.truncate(System.Boolean)">
             Clears the contents of the temp buffer and sets the buffer size to zero
            
             @param reallocBuffer Indicates whether the memory allocated for the the
             buffer should be released.
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.getSize">
            Returns the size of the temp buffer in bytes
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.close">
            <summary>
            Closes and deletes tempfile used
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.setBlockSize(System.Int32)">
             Set the block size for this temp buffer
            
             @param blockSize The block size to use
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.getBlock(System.Int32,System.Boolean)">
            Fetch the physical memory block to use based on the block number.  Load
            the request logical block into the physical block if necessary
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.getTempFile">
            Return the current temp file associated with this temp buffer.  Creates
            a new temp file if one does not exist
        </member>
        <member name="M:DDInt.Utility.UtilPagedTempBuffer.Finalize">
            <summary>
            Make sure the tmpfile is deleted when GC cleans this object
            </summary>
        </member>
        <member name="F:DDInt.Utility.UtilTempBufferBlock.data">
            The first physical block of the pair
        </member>
        <member name="F:DDInt.Utility.UtilTempBufferBlock.blockNum">
            The number of the virtual block loaded into the first physical block
            of the pair
        </member>
        <member name="F:DDInt.Utility.UtilTempBufferBlock.blockDirty">
            Indicates whether the data in the first physical block has changed since
            it was last written to disk
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Utility.UtilSocketDataConsumer" -->
        <member name="F:DDInt.Utility.UtilSocketDataConsumer.socketOutputStream">
            The output stream associated with the encapsulated
            Socket object.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataConsumer.#ctor(System.Net.Sockets.TcpClient)">
             Primary constructor, allowing specification of the Socket
             to which data should be sent.
            
             @param obj A Java Socket object to which data should be sent.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataConsumer.putByte(System.Byte)">
             Accepts a single byte and forwards it to the underlying
             Socket.
            
             @param b The byte to be sent to the Socket. 
            
             @exception UtilException If an error occurs writing to the
             Socket's output stream.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataConsumer.putArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Accepts a group of bytes and forwards them to the underlying
             Socket.
            
             @param b The array of bytes to be sent to the Socket.
            
             @param offset The index in the byte array which indicates
             the starting point of the data to sent to the Socket.
            
             @param len The number of bytes to be taken from "b" and
             sent to the Socket.
            
             @exception UtilException If an error occurs writing to the
             Socket's output stream.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataConsumer.send">
             This method performs a flush on the Socket's data
             output stream.
            
             @exception UtilException If an error occurs flushing
             Socket's output stream.
        </member>
        <member name="T:DDInt.Utility.UtilSocketDataProvider">
            <summary>
            Summary description for UtilSocketDataProvider.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataProvider.getByte">
             Method which obtains and returns a single byte; exactly
             how the byte is obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @return The single byte which was read.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataProvider.getArrayOfBytes(System.Byte[],System.Int32,System.Int32)">
             Method which obtains and returns a group of bytes; exactly
             how the bytes are obtained is specific to the class which
             implements this (UtilDataProvider) interface.
            
             @param b The byte array into which the requested data should
             be placed.
            
             @param offset The index in "b" which indicates
             the starting point at which the data should be placed.
            
             @param len The maximum number of bytes to read and place in "b".
            
             @return The number of bytes read and placed into "b". Note that
             this may be fewer than the number requested (if the requested 
             number are not available). In this case, "getArrayOfBytes" should 
             NOT throw a NO_MORE_DATA_TO_READ UtilException.
            
             @exception UtilException(NO_MORE_DATA_TO_READ) If no more data is 
             available.
            
             @exception UtilException If some other error is encountered.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataProvider.empty">
             Method which reads ALL data which is currently available and
             discards it.
            
             @exception UtilException If some error occurs while reading/discarding
             all available data.
        </member>
        <member name="M:DDInt.Utility.UtilSocketDataProvider.receive">
             Method which retrieves data from some source, making it available
             for return by the "get" methods.
            
             For some classes which implement the UtilDataProvider interface,
             this method won't do much.
            
             @exception UtilException If some error occurs while retrieving the
             data and making it available for reading.
        </member>
        <member name="T:DDInt.Utility.UtilTextDESEncryption">
            <summary>
            Encryption class used to encrypt/decrypt using DES
            String is encrypted after converting it to a specific encoding
            needed by the receiver.
            This is needed because the receiver may not expect unicode text.
            </summary>
            <copyright>Copyright (c) 2002-2003</copyright>
            <company>NetSuite Technologies</company>
            <author>Marc Ost</author>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable">
            <summary>
            Summary description for UtilTransliterationTable.
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_ASCII">
            <summary>
            Transliteration Table Object for SBCS Codepage ASCII.
            Ascii Codepage ANSI_X3.4-1968
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_HP_ROMAN8">
            <summary>
            Transliteration Table Object for SBCS Codepage HP-ROMAN8.
            Ascii Codepage 
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01086">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01086.
            Japanese Codepage : JAPAN PC#1 
            see also: JIS X 0201
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01140">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01140.
            EBCDIC Codepage for USA/Canada + EURO support
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01141">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01141.
            EBCDIC Codepage for Germany/Austria + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01142">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01142.
            EBCDIC Codepage for Denmark/Norway + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01143">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01143.
            EBCDIC Codepage for Finland/Sweden + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01144">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01144.
            EBCDIC Codepage for Italy + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01145">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01145.
            EBCDIC Codepage for Spain/Latin America + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01146">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01146.
            EBCDIC Codepage for United Kingdom + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01147">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01147.
            EBCDIC Codepage for France + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01148">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01148.
            EBCDIC Codepage for Belgium/International use + EURO support
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM01149">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM01149.
            EBCDIC Codepage for Iceland + EURO SUPPORT
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM037">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM284.
            EBCDIC Codepage for USA/Canada
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM273">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM273.
            EBCDIC Codepage for Germany/Austria
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM277">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM277.
            EBCDIC Codepage for Denmark/Norway
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM278">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM278.
            EBCDIC Codepage for Finland/Sweden
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM280">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM280.
            EBCDIC Codepage for Italy
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM284">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM284.
            EBCDIC Codepage for Spain/Latin America
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM285">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM285.
            EBCDIC Codepage for United Kingdom
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM290">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM290.
            EBCDIC Codepage for Japanese (Katakana)
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM297">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM297.
            EBCDIC Codepage for France
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM500">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM500.
            EBCDIC Codepage for Belgium/International use
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM850">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM850.
            Ascii Codepage PC Multilingual
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM871">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM871.
            EBCDIC Codepage for Iceland
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM895">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM895.
            Japanese Codepage : JAPAN 7 Bit 
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_IBM897">
            <summary>
            Transliteration Table Object for SBCS Codepage IBM897.
            Japanese Codepage : JAPAN PC#1 
            see also: JIS X 0201
            </summary>
        </member>
        <member name="T:DDInt.Utility.UtilTransliterationTable_ISO_8859_1">
            <summary>
            Transliteration Table Object for SBCS Codepage ISO_8859-1.
            Ascii Codepage Latin-1
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.GetEncoding(System.String)">
            <summary>
            Gets codepage by name.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.GetEncoding(System.Int32)">
            <summary>
            Gets codepage by windows codepage number.
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.AliasToIANAName(System.String)">
            <summary>
            Maps a character set alias to an IANA character set name.
            This mapping supports only the code pages implemented by NetSuite.Util.
            Based on http://www.iana.org/assignments/character-sets with some additions
            </summary>
            <returns>Name or null if not found</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.AliasToICUMapName(System.String)">
            <summary>
            Maps a character set alias to an ICU character map name.
            This mapping supports only the code pages implemented by NetSuite.Util.
            Based on http://oss.software.ibm.com/cvs/icu/charset/data/ucm/ 
            </summary>
            <returns>Name or null if not found</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.CodepageToIANAName(System.Int32)">
            <summary>
            Maps a Windows codepage nr to an IANA character set name.
            This mapping supports only the code pages implemented by NetSuite.Util.
            </summary>
            <returns>Name or null if not found</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.CodepageToICUMapName(System.Int32)">
            <summary>
            Maps a codepage nr to an ICU character map name.
            This mapping supports only the code pages implemented by NetSuite.Util.
            </summary>
            <returns>Name or null if not found</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.IANANameToCodepage(System.String)">
            <summary>
            Maps an IANA character set name to a codepage nr.
            This mapping supports only the code pages implemented by NetSuite.Util.
            </summary>
            <returns>Codepage or 0 if not found</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliterator.ICUMapNameToCodepage(System.String)">
            <summary>
            Maps an ICU character map name to a codepage nr.
            This mapping supports only the code pages implemented by NetSuite.Util.
            </summary>
            <returns>Codepage or 0 if not found</returns>
        </member>
        <member name="T:DDInt.Utility.UtilTransliteratorUsingICUTable">
            <summary>
            Class defining the transliteration process for fragments, using 
            mapping tables dowloaded from http://oss.software.ibm.com/icu/charset/
            </summary>
        </member>
        <member name="M:DDInt.Utility.UtilTransliteratorUsingICUTable.readByteSequence(System.String,System.Int32)">
            <summary>
            This helper-method reads a byte sequence from the charmap
            that is formatted like this:  \x42\x5B....
            upto a maximum of 4 bytes and converts it to an Int32
            </summary>
            <param name="line">string to read from</param>
            <param name="offset">offset to start reading</param>
            <returns>Int32</returns>
        </member>
        <member name="M:DDInt.Utility.UtilTransliteratorUsingICUTable.buildConversionTables(System.IO.StreamReader)">
            <summary>
            This method reads the entire contents of the ICU mappings file and
            constructs the unicodeToCharsetMapping, primaryCharsetToUnicodeMapping 
            and secondaryCharsetToUnicodeMapping arrays.
            </summary>
            <param name="sr">StreamReader that provides the ICU map</param>
        </member>
    </members>
</doc>
